package com.yulun.controller.count;

import com.alibaba.fastjson.JSONObject;
import com.fh.entity.Page;
import com.fh.util.PageData;
import com.xxgl.service.mng.ZxlbManager;
import com.yulun.controller.api.CommonIntefate;
import com.yulun.service.JobregManager;
import com.yulun.service.PersonCountManager;
import com.yulun.utils.TimeHandle;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.Date;
import java.util.List;
import java.util.Map;

/** @Author Aliar @Time 2020-05-19 20:49 */
public class PersonCount implements CommonIntefate {
  static final String SUCCESS = "success";
  static final String MSG = "msg";
  static final String FALSE = "false";
  static final String TRUE = "true";
  Integer pageIndex;
  Integer pageSize;

  @Resource(name = "zxlbService")
  private ZxlbManager zxlbService;

  @Resource(name = "personCountService")
  private PersonCountManager personCountService;

  @Override
  public JSONObject execute(JSONObject data, HttpServletRequest request) throws Exception {
    JSONObject object = new JSONObject();
    PageData pd = new PageData();
    String cmd = data.getString("cmd") == null ? "" : data.getString("cmd");
    PageData pd_stoken = new PageData();
    JSONObject json = data.getJSONObject("data");
    pd_stoken.put("TOKENID", json.get("tokenid"));
    try {
      PageData pd_token = zxlbService.findByTokenId(pd_stoken);
      if (null == pd_token) {
        json.put(SUCCESS, FALSE);
        json.put(MSG, "请重新登陆");
        return object;
      }

      if ("personCount".equals(cmd)) {
        String startTime = json.getString("startTime");
        String endTime = json.getString("endTime");
        String timeSlot = json.getString("timeSlot");
        // 判空  等于1才能正常运行
        double isNull = 0d;
        if (timeSlot != null && !"".equals(timeSlot)) {
          isNull += 1d;
        }
        if (startTime != null && !"".equals(startTime)) {
          isNull += 0.5d;
        }
        if (endTime != null && !"".equals(endTime)) {
          isNull += 0.5d;
        }
        Page page = new Page();
        page.setShowCount(5);
        page.setCurrentPage(1);
        if (isNull < 1d) {
          object.put(SUCCESS, FALSE);
          object.put(MSG, "StartTime and endTime or timeSolit is NULL");
          return object;
        } else if (isNull == 2d || isNull == 1.5d) {
          object.put(SUCCESS, FALSE);
          object.put(MSG, "StartTime and endTime and timeSolit Can't together");
          return object;
        }
        // 传值
        if (timeSlot == null || "".equals(timeSlot)) {
          pd.put("startTime", startTime);
          pd.put("endTime", endTime);
        } else {
          Map<String, String> time = TimeHandle.getCountTime(timeSlot);
          String msg = time.get("msg");
          if (msg != null && !"".equals(msg)) {
            object.put(MSG, msg);
            object.put(SUCCESS, FALSE);
            return object;
          }
          startTime = time.get("startTime");
          endTime = time.get("endTime");
          pd.put("startTime", startTime);
          pd.put("endTime", endTime);
        }
        page.setPd(pd);
        // 求职人员总数：
        PageData jobregCount = personCountService.jobregCount(pd);
        object.putAll(jobregCount);
        // 用工推荐总数：
        PageData recruitCount = personCountService.recruitCount(pd);
        object.putAll(recruitCount);
        // 性别统计:
        List<PageData> sexCount = personCountService.sexCount(page);
        object.put("sexCount", sexCount);
        // 年龄分段统计:
        List<PageData> ageCount = personCountService.ageCount(page);
        object.put("ageCount", ageCount);
        // 学历统计：
        List<PageData> xlCount = personCountService.xlCount(page);
        object.put("xlCount", xlCount);
        // 岗位分布：
        List<PageData> jobCount = personCountService.jobCount(page);
        object.put("jobCount", jobCount);
        //新增人数
        PageData npd = new PageData();
        npd.put("endTime",TimeHandle.getTodayTime());
        PageData jobregTodayCount = personCountService.jobregCount(npd);
        npd.put("endTime",TimeHandle.getYesterdayTime());
        PageData jobregYesterdayCount = personCountService.jobregCount(npd);
        Integer jobregChange =
                Integer.valueOf(jobregTodayCount.get("joregCount").toString())  -
                        Integer.valueOf(jobregYesterdayCount.get("joregCount").toString());
        object.put("jobregChange",jobregChange);
      }

    } catch (Exception e) {
      object.put(SUCCESS, FALSE);
      object.put(MSG, "数据异常");

    } finally {
      return object;
    }
  }
}
