package com.yulun.controller.common;

import com.alibaba.fastjson.JSONObject;
import com.fh.controller.base.BaseController;
import com.fh.entity.Page;
import com.fh.util.*;
import com.xxgl.service.mng.ZxlbManager;
import com.yulun.service.*;
import com.yulun.service.impl.CompanyService;
import com.yulun.service.impl.ConsumerService;
import com.yulun.service.impl.PersonService;
import com.yulun.service.impl.TrainrecoService;
import com.yulun.utils.CardIdJudge;
import com.yulun.utils.ListUtil;
import com.yulun.utils.TimeHandle;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.Region;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.hssf.util.Region;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import schemasMicrosoftComVml.HandlesDocument;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.OutputStream;
import java.net.URLDecoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;


@Controller
@CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
@RequestMapping(value = "/api")
public class ExcelController extends BaseController {

    @Resource(name = "commnoService")
    private CommnoManager commnoManager;

    @Resource(name = "vipInfoService")
    private VipInfoManager vipInfoManager;

    @Resource(name = "zxlbService")
    private ZxlbManager zxlbService;

    @Resource(name = "consumerService")
    private ConsumerManager consumerManager;

    @Resource(name = "jobReferService")
    private JobReferManager jobReferManager;

    @Resource(name = "msgTempService")
    private MsgTempManager msgTempManager;

    @Resource(name="trainInfoService")
    private TrainInfoManager trainInfoService;

    @Resource(name="otherServiceService")
    private OtherServiceManager otherServiceService;

    @Resource(name="otherPersonService")
    private OtherPersonManager otherPersonService;

    @Resource(name="policyService")
    private PolicyManager policyService;

    @Resource(name="signupService")
    private SignupManager signupService;

    @Resource(name="guideService")
    private GuideManager guideService;

    @Resource(name="emPersonService")
    private EmPersonManager emPersonService;
    @Resource(name="trainrecoService")
    private TrainrecoService trainrecoService;

    @Resource(name = "revrecordService")
    private RevrecordManager revrecordManager;

    @Resource(name = "personCountService")
    private PersonCountManager personCountService;

    @Resource(name = "companyService")
    private CompanyManager companyService;

    /**
     * 导入用户信息到EXCEL
     *
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/app_readComExcel")
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readComExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            System.out.println(request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                if (null != file && !file.isEmpty()) {
                    String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;                                //文件上传路径
                    String fileName = FileUpload.fileUp(file, filePath, "ComExcel");                            //执行上传
                    List<PageData> listPd = (List) ObjectExcelRead.readExcel(filePath, fileName, 2, 0, 0);        //执行读EXCEL操作,读出的数据导入List 2:从第3行开始；0:从第A列开始；0:第0个sheet
                    /*存入数据库操作======================================*/
                    for (int i = 0; i < listPd.size(); i++) {
                        pd.put("name", listPd.get(i).getString("var1"));
                        pd.put("phone", listPd.get(i).getString("var2"));
                        pd.put("age", listPd.get(i).getString("var3"));
                        pd.put("sex", listPd.get(i).getString("var4"));
                        pd.put("cardtype", listPd.get(i).getString("var5"));
                        pd.put("idcard", listPd.get(i).getString("var6"));
                        pd.put("address", listPd.get(i).getString("var7"));
                        commnoManager.insertCommon(pd);

                    }
                    json.put("success", "true");
                }

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }
        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    /**
     * 导入用户信息到EXCEL
     *
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/app_readVipExcel")
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readVipExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {

                if (null != file && !file.isEmpty()) {
                    String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;                                //文件上传路径
                    String fileName = FileUpload.fileUp(file, filePath, "VipExcel");                            //执行上传
                    List<PageData> listPd = (List) ObjectExcelRead.readExcel(filePath, fileName, 2, 0, 0);        //执行读EXCEL操作,读出的数据导入List 2:从第3行开始；0:从第A列开始；0:第0个sheet
                    /*存入数据库操作======================================*/
                    for (int i = 0; i < listPd.size(); i++) {
                        pd.put("id", getUUID32());
                        pd.put("name", listPd.get(i).getString("var1"));
                        pd.put("sex", listPd.get(i).getString("var2"));
                        pd.put("idcard", listPd.get(i).getString("var3"));
                        pd.put("recepdep", listPd.get(i).getString("var4"));
                        pd.put("clevel", listPd.get(i).getString("var5"));
                        pd.put("birthday", listPd.get(i).getString("var6"));
                        pd.put("position", listPd.get(i).getString("var7"));
                        pd.put("place", listPd.get(i).getString("var8"));
                        pd.put("waiter", listPd.get(i).getString("var9"));
                        pd.put("isimport", listPd.get(i).getString("var10"));
                        pd.put("isusecard", listPd.get(i).getString("var11"));
                        pd.put("ortherinfo", listPd.get(i).getString("var12"));
                        pd.put("ctype", listPd.get(i).getString("var13"));
                        pd.put("favorite", listPd.get(i).getString("var14"));
                        pd.put("result", listPd.get(i).getString("var15"));
                        vipInfoManager.insertVipInfo(pd);

                    }
                    json.put("success", "true");
                }
            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }


        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/downComExcel")
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public void downComExcel(HttpServletResponse response) throws Exception {
        FileDownload.fileDownload(response, PathUtil.getClasspath() + Const.FILEPATHFILE + "ComExcel.xls", "ComExcel.xls");
    }

    @RequestMapping(value = "/downVipExcel")
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public void downVipExcel(HttpServletResponse response) throws Exception {
        FileDownload.fileDownload(response, PathUtil.getClasspath() + Const.FILEPATHFILE + "VipExcel.xls", "VipExcel.xls");
    }

    public String getUUID32() {
        String uuid = UUID.randomUUID().toString();
        uuid = uuid.replace("-", "");
        return uuid;
    }


    /**
     * 导出到Excel
     */
    @RequestMapping("/app_exportComExcel")
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String name = pd.getString("name");
                String phone = pd.getString("phone");
                String idcard = pd.getString("idcard");
                String type = pd.getString("type");
                String keywords = pd.getString("keywords");
                String pageIndex = pd.getString("pageIndex");
                String pageSize = pd.getString("pageSize");
                String name1 = name == null ? "" : urlDecoder.decode(name, "utf-8");
                String phone1 = name == null ? "" : urlDecoder.decode(phone, "utf-8");
                String idcard1 = name == null ? "" : urlDecoder.decode(idcard, "utf-8");
                String type1 = name == null ? "" : urlDecoder.decode(type, "utf-8");
                String keywords1 = name == null ? "" : urlDecoder.decode(keywords, "utf-8");
                String pageIndex1 = name == null ? "" : urlDecoder.decode(pageIndex, "utf-8");
                String pageSize1 = name == null ? "" : urlDecoder.decode(pageSize, "utf-8");
                pd.put("name", name1);
                pd.put("phone", phone1);
                pd.put("idcard", idcard1);
                pd.put("type", type1);
                pd.put("keywords", keywords1);
                pd.put("pageIndex", pageIndex1);
                pd.put("pageSize", pageSize1);
                page.setPd(pd);
                System.out.println(pd);
                List<PageData> clist = commnoManager.findAlllistPage(page);
                System.out.println(clist);
                if (clist.size() > 0) {
                    //创建excel文件
                    HSSFWorkbook wb = new HSSFWorkbook();
                    //创建sheet页
                    HSSFSheet sheet = wb.createSheet("普客信息记录");
                    //创建标题行
                    HSSFRow titleRow = sheet.createRow(0);
                    titleRow.createCell((short) 0).setCellValue("客户姓名");
                    titleRow.createCell((short) 1).setCellValue("客户电话");
                    titleRow.createCell((short) 2).setCellValue("年龄");
                    titleRow.createCell((short) 3).setCellValue("性别");
                    titleRow.createCell((short) 4).setCellValue("证件类型");
                    titleRow.createCell((short) 5).setCellValue("证件号码");
                    titleRow.createCell((short) 6).setCellValue("所在区域");
                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(pd1.getString("name"));
                        dataRow.createCell((short) 1).setCellValue(pd1.getString("phone"));
                        dataRow.createCell((short) 2).setCellValue(pd1.getString("age"));
                        dataRow.createCell((short) 3).setCellValue(pd1.getString("sex"));
                        dataRow.createCell((short) 4).setCellValue(pd1.getString("cardtype"));
                        dataRow.createCell((short) 5).setCellValue(pd1.getString("idcard"));
                        dataRow.createCell((short) 6).setCellValue(pd1.getString("address"));
                    }
                    // 设置下载时客户端Excel的名称
                    String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-CUSTINFO.xls";
                    //设置下载的文件
                    System.out.println(filename);
                    response.setCharacterEncoding("UTF-8");
                    response.setContentType("application/vnd.ms-excel");
                    response.setHeader("Content-disposition", "attachment;filename=" + filename);
                    OutputStream ouputStream = response.getOutputStream();//打开流
                    wb.write(ouputStream); //在excel内写入流
                    ouputStream.flush();// 刷新流
                    ouputStream.close();// 关闭流
                }

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/exportgraduateExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportgraduateExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String jobtype = request.getParameter("jobtype");
                String arrtime = request.getParameter("arrtime");
                System.out.println(arrtime);
                jobtype = jobtype == null ? "" : urlDecoder.decode(jobtype, "utf-8");
                arrtime = arrtime == null ? "" : urlDecoder.decode(arrtime, "utf-8");
                pd.put("jobtype", jobtype);
                if(null != arrtime && !"".equals(arrtime)){
                    pd.put("arrtime",arrtime + "-01 00:00:00");
                    System.out.println(arrtime);
                }

                page.setPd(pd);
                page.setShowCount(999999999);
                page.setCurrentPage(1);
                System.out.println(pd);
                List<PageData> clist = consumerManager.findgraduateExport(page);
                System.out.println(clist);

                //创建excel文件
                HSSFWorkbook wb = new HSSFWorkbook();
                //创建sheet页
                HSSFSheet sheet = wb.createSheet("高校毕业生");
                //创建一个单元格

                //创建第一行标题行
                HSSFRow titleRow_1 = sheet.createRow((short)0);
                Region region = new Region((short)0,(short)0,(short)1,(short)16);
                sheet.addMergedRegion(region);
                //设置首行Style
                HSSFCellStyle titleStyle = wb.createCellStyle();
                titleStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN); //下边框
                titleStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);//左边框
                titleStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);//上边框
                titleStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);//右边框
                titleStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
                HSSFFont titleFont = wb.createFont();
                titleFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);//粗体显示
                titleFont.setFontHeightInPoints((short) 20);
                titleStyle.setFont(titleFont);


                HSSFCell cell_1 = titleRow_1.createCell((short)0);
                cell_1.setCellValue("漳浦县高校毕业生就业创业服务台帐");
                cell_1.setCellStyle(titleStyle);
                //第二行
                HSSFRow titleRow_2 = sheet.createRow((short)2);
                region = new Region((short)2,(short)0,(short)3,(short)0);
                sheet.addMergedRegion(region);
                HSSFCell cell0 = titleRow_2.createCell((short) 0);
                cell0.setCellValue("序号");
                region = new Region((short)2,(short)1,(short)3,(short)1);
                sheet.addMergedRegion(region);
                HSSFCell cell1 = titleRow_2.createCell((short) 1);
                cell1.setCellValue("回访时间");
                region = new Region((short)2,(short)2,(short)3,(short)2);
                sheet.addMergedRegion(region);
                HSSFCell cell2 = titleRow_2.createCell((short) 2);
                cell2.setCellValue("服务次数");
                region = new Region((short)2,(short)3,(short)3,(short)3);
                sheet.addMergedRegion(region);
                HSSFCell cell3 = titleRow_2.createCell((short) 3);
                cell3.setCellValue("姓名");
                region = new Region((short)2,(short)4,(short)3,(short)4);
                sheet.addMergedRegion(region);
                HSSFCell cell4 = titleRow_2.createCell((short) 4);
                cell4.setCellValue("性别");
                region = new Region((short)2,(short)5,(short)3,(short)5);
                sheet.addMergedRegion(region);
                HSSFCell cell5 = titleRow_2.createCell((short) 5);
                cell5.setCellValue("文化程度");
                region = new Region((short)2,(short)6,(short)3,(short)6);
                sheet.addMergedRegion(region);
                HSSFCell cell6 = titleRow_2.createCell((short) 6);
                cell6.setCellValue("联系电话");
                region = new Region((short)2,(short)7,(short)3,(short)7);
                sheet.addMergedRegion(region);
                HSSFCell cell7 = titleRow_2.createCell((short) 7);
                cell7.setCellValue("毕业院校及专业");
                region = new Region((short)2,(short)8,(short)3,(short)8);
                sheet.addMergedRegion(region);
                HSSFCell cell8 = titleRow_2.createCell((short) 8);
                cell8.setCellValue("就业创业状态");
                region = new Region((short)2,(short)9,(short)3,(short)9);
                sheet.addMergedRegion(region);
                HSSFCell cell9 = titleRow_2.createCell((short) 9);
                cell9.setCellValue("求职意向");
                region = new Region((short)2,(short)10,(short)2,(short)12);
                sheet.addMergedRegion(region);
                HSSFCell cell10 = titleRow_2.createCell((short) 10);
                cell10.setCellValue("提供就业服务情况");
                region = new Region((short)2,(short)13,(short)2,(short)14);
                sheet.addMergedRegion(region);
                HSSFCell cell13 = titleRow_2.createCell((short) 13);
                cell13.setCellValue("就业情况");
                //第三行
                HSSFRow titleRow_3 = sheet.createRow(3);
                region = new Region((short)3,(short)10,(short)3,(short)10);
                sheet.addMergedRegion(region);
                HSSFCell cell10_1 = titleRow_3.createCell((short) 10);
                cell10_1.setCellValue("职业介绍");
                region = new Region((short)3,(short)11,(short)3,(short)11);
                sheet.addMergedRegion(region);
                HSSFCell cell10_2 = titleRow_3.createCell((short) 11);
                cell10_2.setCellValue("技能培训");
                region = new Region((short)3,(short)12,(short)3,(short)12);
                sheet.addMergedRegion(region);
                HSSFCell cell10_3 = titleRow_3.createCell((short) 12);
                cell10_3.setCellValue("创业扶持政策");

                region = new Region((short)3,(short)13,(short)3,(short)13);
                sheet.addMergedRegion(region);
                HSSFCell cell13_1 = titleRow_3.createCell((short) 13);
                cell13_1.setCellValue("就业（创业）单位");

                region = new Region((short)3,(short)14,(short)3,(short)14);
                sheet.addMergedRegion(region);
                HSSFCell cell13_3 = titleRow_3.createCell((short) 14);
                cell13_3.setCellValue("就业时间");

                region = new Region((short)2,(short)15,(short)3,(short)15);
                sheet.addMergedRegion(region);
                HSSFCell cell15 = titleRow_2.createCell((short) 15);
                cell15.setCellValue("备注");





                int count = 1;
                if (clist.size() > 0) {
                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(count);
                        count++;
                        dataRow.createCell((short) 1).setCellValue(pd1.getString("newServiceTime"));
                        dataRow.createCell((short) 2).setCellValue(String.valueOf(pd1.get("serviceCount")));
                        dataRow.createCell((short) 3).setCellValue(pd1.getString("name"));
                        String sex = pd1.getString("sex");
                        if ("1".equals(sex)) {
                            dataRow.createCell((short) 4).setCellValue("男");
                        }else if("2".equals(sex)){
                            dataRow.createCell((short) 4).setCellValue("女");
                        }
                        dataRow.createCell((short) 5).setCellValue(pd1.getString("xlName"));
                        dataRow.createCell((short) 6).setCellValue(pd1.getString("tel"));
                        dataRow.createCell((short) 7).setCellValue(pd1.getString("schoolAndMajor"));
                        String isjob = pd1.getString("isjob");
                        if("0".equals(isjob)){
                            dataRow.createCell((short) 8).setCellValue("失业");
                        }else  if("1".equals(isjob)){
                            dataRow.createCell((short) 8).setCellValue("就业");
                        }else if("2".equals(isjob)){
                            dataRow.createCell((short) 8).setCellValue("无意向就业");

                        }else if("3".equals(isjob)){
                            dataRow.createCell((short) 8).setCellValue("灵活就业");

                        }else if("4".equals(isjob)){
                            dataRow.createCell((short) 8).setCellValue("自主创业");
                        }

                        dataRow.createCell((short) 9).setCellValue(pd1.getString("qzgw"));
                        dataRow.createCell((short) 10).setCellValue(pd1.getString("companyName"));
                        dataRow.createCell((short) 11).setCellValue(pd1.getString("trainReco"));
                        dataRow.createCell((short) 12).setCellValue(pd1.getString("jobHelp"));
                        dataRow.createCell((short) 13).setCellValue(pd1.getString("jobUnit"));
                        dataRow.createCell((short) 14).setCellValue(pd1.getString("jobTime"));
                        dataRow.createCell((short) 15).setCellValue(pd1.getString("remark"));
                    }

                }
                  sheet.autoSizeColumn((short)1);
                  sheet.autoSizeColumn((short)7);
   

                // 设置下载时客户端Excel的名称
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-gxbys.xls";
                //设置下载的文件
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//打开流
                wb.write(ouputStream); //在excel内写入流
                ouputStream.flush();// 刷新流
                ouputStream.close();// 关闭流

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/readgraduateExcel2", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readgraduateExcel2(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        return "";
    }

    @RequestMapping(value = "/readgraduateExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readgraduateExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            System.out.println(request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            String zxyh = "602";
            if (pd_token != null) {
                if (null != file && !file.isEmpty()) {
                    String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;                                //文件上传路径
                    String fileName = FileUpload.fileUp(file, filePath, "ComExcel");                            //执行上传
                    List<PageData> listPd = (List) ObjectExcelRead2.readExcel(filePath, fileName, 1, 0, 0);        //执行读EXCEL操作,读出的数据导入List 2:从第3行开始；0:从第A列开始；0:第0个sheet
                    List<PageData> dicAll = consumerManager.getDicAll(pd);
                    /*检查字段操作======================================*/


                    boolean check = true;
                    String str = "";
//                    for (int i = 0; i < listPd.size(); i++) {
//                        String var0 = listPd.get(i).getString("var0").trim();
//
//                        String var14 = listPd.get(i).getString("var14").trim();
//                        if (!var0.equals("报到时间")) {
//                            check = false;
//                            str = str + "模板格式错误";
//                            break;
//                        }
//                        if (!var14.equals("备注")){
//                            check = false;
//                            str = str + "模板格式错误";
//                            break;
//                        }
//                    }
                    for (int i = 0; i < listPd.size(); i++) {
                        System.out.println(i);
                        String var0 = listPd.get(i).getString("var0").trim();
                        String var1 = listPd.get(i).getString("var1").trim();
                        String var2 = listPd.get(i).getString("var2").trim();
                        String var3 = listPd.get(i).getString("var3").trim();
                        String var9 = listPd.get(i).getString("var9").trim();
                        String var10 = listPd.get(i).getString("var10").trim();
                        String var12 = listPd.get(i).getString("var12").trim();

                        if (var0.equals("")) {
                            check = false;
                            str = str + "报到时间不能为空;";
                            break;
                        } else if (var1.equals("")) {
                            check = false;
                            str = str + "姓名不能为空;";
                            break;
                        } else if (var3.equals("")) {
                            check = false;
                            str = str + "身份证号码不能为空;";
                            break;
                        } else if (var9.equals("")) {
                            check = false;
                            str = str + "联系电话不能为空;";
                            break;
                        } else if (var10.equals("")) {
                            check = false;
                            str = str + "应急联系电话不能为空;";
                            break;
                        } else if (var12.equals("")) {
                            check = false;
                            str = str + "就业状态不能为空;";
                            break;
                        } else if (!"男".equals(var2)&&!"女".equals(var2)){
                            check = false;
                            str = str + "性别有误;";
                            break;
                        }

                        PageData pd1 = new PageData();
                        pd1.put("name",var12);
                        PageData dic = consumerManager.getDIC(pd1);
                        if (dic==null){
                            if(!"就业".equals(var12)) {
                                str = str + "无此就业状态;";
                                check = false;
                                break;
                            }
                        }

                    }
                    /*存入数据库操作======================================*/
                    List<PageData> saveList = new ArrayList<PageData>();
                    if (check == true) {
                        for (int i = 0; i < listPd.size(); i++) {
                            System.out.println(i);
                            pd.put("arrtime", listPd.get(i).getString("var0").trim());
                            pd.put("name", listPd.get(i).getString("var1").trim());
                            String var2 = listPd.get(i).getString("var2").trim();
                            if ("男".equals(var2)){
                                var2="1";
                            }else if ("女".equals(var2)){
                                var2="2";
                            }else {
                                var2="0";
                            }
                            pd.put("sex", var2);
                            pd.put("cardid", listPd.get(i).getString("var3").trim());
                            pd.put("school", listPd.get(i).getString("var4").trim());
                            String var5 = listPd.get(i).getString("var5").trim();
                            System.out.println(var5);
                            pd.put("gradate", var5);
                            String var6 = listPd.get(i).getString("var6").trim();
                            PageData pd1 = new PageData();
                            pd1.put("name",var6);
                            for (PageData pageData : dicAll) {
                                if (var6.equals(pageData.getString("NAME"))){
                                    pd.put("xl", pageData.getString("DICTIONARIES_ID"));
                                }
                            }
//                            if (dic1!=null){
//                                pd.put("xl", dic1.getString("DICTIONARIES_ID"));
//                            }else {
////                                    str = str + "查无此学历;";
////                                    json.put("msg", str);
////                                    break;
//                                pd.put("xl", "暂无");
//                            }
                            pd.put("zy", listPd.get(i).getString("var7").trim());
                            pd.put("addr", listPd.get(i).getString("var8").trim());
                            pd.put("jg", listPd.get(i).getString("var8").trim());
                            pd.put("tel", listPd.get(i).getString("var9").trim());
                            pd.put("lxtel", listPd.get(i).getString("var9").trim());
                            pd.put("extel", listPd.get(i).getString("var10").trim());
                            pd.put("jobadd", listPd.get(i).getString("var11").trim());
                            String var12 = listPd.get(i).getString("var12").trim();
                            if ("就业".equals(var12)){
                                pd.put("isjob", "1");
                            }else if("失业".equals(var12)){
                                pd.put("isjob", "0");
                            }else if("无意向就业".equals(var12)){
                                pd.put("isjob", "2");
                            }else if("灵活就业".equals(var12)){
                                pd.put("isjob", "3");
                            }else if("自主创业".equals(var12)){
                                pd.put("isjob", "4");
                            }
//                            PageData pd1 = new PageData();
//                            pd1.put("name",var12);
//                            PageData dic = consumerManager.getDIC(pd1);
//                            if (dic!=null){
//                                pd.put("jobtype", dic.getString("DICTIONARIES_ID"));
//                            }else {
//                                str = str + "无此就业状态;";
//                                json.put("msg", str);
//                                break;
//                            }
                            pd.put("jobunit", listPd.get(i).getString("var13").trim());
                            pd.put("remark", listPd.get(i).getString("var14").trim());
                            pd.put("isimpot", '1');
                            pd.put("cate","7c2896ad53df4440b81c251231b196fd");
                            pd.put("czdate", getTime());
                            pd.put("czman", zxyh);
                            pd.put("uid", getUUID32());
                        PageData savePd = new PageData();
                        savePd.putAll(pd);
                        saveList.add(savePd);
//                            consumerManager.insertgraduate(pd);
                            consumerManager.savegraduate(pd);
                            consumerManager.savePerson(pd);
                        }
                        consumerManager.batchSaveGrad(saveList);
                        json.put("success", "true");
                    } else if (check == false) {
                        json.put("msg", str);
                    }
                }

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }
        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/exportpovertyExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportpovertyExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String jg = request.getParameter("jg");
                String tel = request.getParameter("tel");
                String isJob = request.getParameter("isJob");
                String cardId = request.getParameter("cardId");
                jg = jg == null ? "" : urlDecoder.decode(jg, "utf-8");
                tel = tel == null ? "" : urlDecoder.decode(tel, "utf-8");
                 isJob = isJob == null ? "" : urlDecoder.decode(isJob, "utf-8");
                cardId = cardId == null ? "" : urlDecoder.decode(cardId, "utf-8");
                pd.put("jg", jg);
                pd.put("tel", tel);
                pd.put("isJob", isJob);
                pd.put("cardId", cardId);
                page.setShowCount(999999999);
                page.setCurrentPage(1);
                page.setPd(pd);
                System.out.println(pd);
                List<PageData> clist = consumerManager.findExportList(page);
                System.out.println(clist);
                //创建excel文件
                HSSFWorkbook wb = new HSSFWorkbook();
                //创建sheet页
                HSSFSheet sheet = wb.createSheet("建档立卡贫困人员");
                //创建标题行
                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("序号");
                titleRow.createCell((short) 1).setCellValue("最新服务时间");
                titleRow.createCell((short) 2).setCellValue("服务次数");
                titleRow.createCell((short) 3).setCellValue("籍贯");
                titleRow.createCell((short) 4).setCellValue("姓名");
                titleRow.createCell((short) 5).setCellValue("联系电话");
                titleRow.createCell((short) 6).setCellValue("证件号码");
                titleRow.createCell((short) 7).setCellValue("年龄");
                titleRow.createCell((short) 8).setCellValue("性别");
                titleRow.createCell((short) 9).setCellValue("就业状态");
                titleRow.createCell((short) 10).setCellValue("情况记录");
                titleRow.createCell((short) 11).setCellValue("求职岗位");
                titleRow.createCell((short) 12).setCellValue("推荐企业");
                titleRow.createCell((short) 13).setCellValue("就业岗位");
                titleRow.createCell((short) 14).setCellValue("就业单位");
                titleRow.createCell((short) 15).setCellValue("推荐政策");
                titleRow.createCell((short) 16).setCellValue("推荐技能");
                titleRow.createCell((short) 17).setCellValue("通话状态");
                titleRow.createCell((short) 18).setCellValue("未接通原因");
                if (clist.size() > 0) {
                int count = 1;
                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(count++);
                        dataRow.createCell((short) 1).setCellValue(pd1.getString("newServiceTime"));
                        dataRow.createCell((short) 2).setCellValue(pd1.get("serviceCount").toString());
                        dataRow.createCell((short) 3).setCellValue(pd1.getString("jgName"));
                        dataRow.createCell((short) 4).setCellValue(pd1.getString("name"));
                        dataRow.createCell((short) 5).setCellValue(pd1.getString("tel"));
                        dataRow.createCell((short) 6).setCellValue(pd1.getString("cardid"));
                        dataRow.createCell((short) 7).setCellValue(pd1.getString("age"));
                        String sex = pd1.getString("sex");
                        if("1".equals(sex)){
                            dataRow.createCell((short) 8).setCellValue("男");
                        }else if("2".equals(sex)){
                            dataRow.createCell((short) 8).setCellValue("女");
                        }
                        String isjob = pd1.getString("isjob");
                        if("0".equals(isjob))
                            dataRow.createCell((short) 9).setCellValue("失业");
                        if("1".equals(isjob))
                            dataRow.createCell((short) 9).setCellValue("就业");
                        if("2".equals(isjob))
                            dataRow.createCell((short) 9).setCellValue("无意向就业");
                        if("3".equals(isjob))
                            dataRow.createCell((short) 9).setCellValue("灵活就业");
                        if("4".equals(isjob))
                            dataRow.createCell((short) 9).setCellValue("自主创业");

                        dataRow.createCell((short) 10).setCellValue(pd1.getString("cate"));
                        dataRow.createCell((short) 11).setCellValue(pd1.getString("qzgw"));
                        dataRow.createCell((short) 12).setCellValue(pd1.getString("companyName"));
                        dataRow.createCell((short) 13).setCellValue(pd1.getString("isjobwork"));
                        dataRow.createCell((short) 14).setCellValue(pd1.getString("jobunit"));
                        dataRow.createCell((short) 15).setCellValue("");
                        dataRow.createCell((short) 16).setCellValue(pd1.getString("trainreco"));
                        String isjt = pd1.getString("isjt");
                        if("0".equals(isjt)){
                            dataRow.createCell((short) 17).setCellValue("未接通");
                        }else if("1".equals(isjt)){
                            dataRow.createCell((short) 17).setCellValue("已接通");
                        }else{
                            dataRow.createCell((short) 17).setCellValue("未回访");
                        }
                        dataRow.createCell((short) 18).setCellValue(pd1.getString("unconnet"));

                    }

                }
                // 设置下载时客户端Excel的名称
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-jdlkry.xls";
                //设置下载的文件
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//打开流
                wb.write(ouputStream); //在excel内写入流
                ouputStream.flush();// 刷新流
                ouputStream.close();// 关闭流

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/readpovertyExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readpovertyExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            System.out.println(request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            String zxyh = pd_stoken.getString("ZXYH");
            if (pd_token != null) {
                if (null != file && !file.isEmpty()) {
                    String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;                                //文件上传路径
                    String fileName = FileUpload.fileUp(file, filePath, "ComExcel");                            //执行上传
                    List<PageData> listPd = (List) ObjectExcelRead2.readExcel(filePath, fileName, 1, 0, 0);        //执行读EXCEL操作,读出的数据导入List 2:从第3行开始；0:从第A列开始；0:第0个sheet

                    /*检查字段操作======================================*/
                    boolean check = true;
                    String str = "";
//                    for (int i = 0; i < listPd.size(); i++) {
//                        String var0 = listPd.get(i).getString("var0");
//                        String var2 = listPd.get(i).getString("var2");
//                        if (!var0.equals("姓名")) {
//                            check = false;
//                            str = str + "模板格式错误";
//                            break;
//                        }
//                        if (!var2.equals("备注")) {
//                            check = false;
//                            str = str + "模板格式错误";
//                            break;
//                        }
//                    }
                    pd.putAll(json);
                    Page page = new Page();
                    page.setShowCount(99999999);
                    page.setCurrentPage(1);
                    page.setPd(pd);
                    List<PageData> cardIdList = new ArrayList<PageData>();
                    List<PageData> telAndNameList = new ArrayList<PageData>();
                    List<PageData> data = consumerManager.findpovertylistPage(page);
                    for (PageData datum : data) {
                        PageData cardIdPd = new PageData();
                        PageData telAndName = new PageData();
                       String cardid = datum.getString("cardid");
                       String tel = datum.getString("tel");
                       String name = datum.getString("name");
                        if(cardid != null && !"".equals(cardid)) {
                            cardIdPd.put("cardid", cardid);
                            cardIdList.add(cardIdPd);
                        }
                        if(tel != null && !"".equals(tel) || name != null && !"".equals(name)) {
                            telAndName.put("name", name);
                            telAndName.put("tel", tel);
                            telAndNameList.add(telAndName);
                        }
                    }
                    List<PageData> updateByCardid = new ArrayList<PageData>();
                    List<PageData> updateByTelAndName = new ArrayList<PageData>();
                    List<PageData> saveList = new ArrayList<PageData>();
                    for (int i = 0; i < listPd.size(); i++) {
                        PageData emp = new PageData();
                        String countNumber = listPd.get(i).getString("var0");
                        String jg = listPd.get(i).getString("var1");
                        String name = listPd.get(i).getString("var2");
                        String tel = listPd.get(i).getString("var3");
                        String cardId = listPd.get(i).getString("var4");
                        if (jg == null || "".equals(jg) ||
                                name == null || "".equals(name)
                        ) {
                           json.put("msg","导入中断，第"+countNumber+"条数据，所属省份和姓名不能为空");
                            json.put("success","false");
                           return json.toString();
                       }
                        PageData info = CardIdJudge.getInfo(cardId);
                        emp.put("sex",info.getString("sex"));
                        emp.put("age",info.getString("age"));
                        emp.put("jg",jg);
                        emp.put("name",name);
                        emp.put("tel",tel);
                        emp.put("cardId",cardId);
                        boolean flag = false;
                        for (PageData pageData : cardIdList) {
                            String empCardid = pageData.getString("cardid");
                            if (empCardid != null && !"".equals(empCardid)) {
                                if (empCardid.equals(cardId)) {
                                    updateByCardid.add(emp);
                                    flag = true;
                                    break;
                                }
                            }
                        }
                        if(flag == false) {
                            for (PageData pageData1 : telAndNameList) {
                                String empTel = pageData1.getString("tel");
                                String empName = pageData1.getString("name");
                                if(empTel != null && !"".equals(empTel) && empName != null && !"".equals(empName)){
                                if (empTel.equals(tel) && empName.equals(name)) {
                                    updateByTelAndName.add(emp);
                                    flag = true;
                                    break;
                                }
                                }
                            }
                        }
                        if(flag == false){
                            emp.put("czman",pd_token.get("ZXYH"));
                            saveList.add(emp);
                        }
                    }


                    for (PageData pageData : updateByCardid) {
                        System.out.println(pageData);
                    }
                    if(updateByCardid != null && updateByCardid.size() >=1) {
                        consumerManager.updateBatchByCardid(updateByCardid);
                    }
                        if(updateByTelAndName != null && updateByTelAndName.size() >=1) {
                                consumerManager.updateBatchByTelAndName(updateByTelAndName);
                        }

                        if(saveList != null && saveList.size() >=1) {
                                consumerManager.saveBatch(saveList);
                        }



                        /*存入数据库操作======================================*/

//                    if (check == true) {
//                        for (int i = 0; i < listPd.size(); i++) {
//                            pd.put("cztime", getTime());
//                            pd.put("name", listPd.get(i).getString("var0"));
//                            pd.put("tel", listPd.get(i).getString("var1"));
//                            pd.put("lxtel", listPd.get(i).getString("var1"));
//                            pd.put("remark", listPd.get(i).getString("var2"));
//                            pd.put("cate", "a6d55a9451534e14aefd082634f78ad9");
//                            pd.put("czman", zxyh);
//                            pd.put("uid", getUUID32());
//                            pd.put("isimpot", "1");
//                            consumerManager.savePerson(pd);
//                        }
                        json.put("success", "true");
//                    } else if (check == false) {
//                        json.put("msg", str);
//                    }

                }

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }
        } catch (Exception e) {

            json.put("success", "false");
        }finally {
            return json.toString();
        }

    }

    @RequestMapping(value = "/exportsbbtryExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportsbbtryExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String starttime = pd.getString("starttime");
                String endtime = pd.getString("endtime");
                String pageIndex = "0";
                String pageSize = "999999999";
                String starttime1 = starttime == null ? "" : urlDecoder.decode(starttime, "utf-8");
                String endtime1 = endtime == null ? "" : urlDecoder.decode(endtime, "utf-8");
                String pageIndex1 = pageIndex == null ? "" : urlDecoder.decode(pageIndex, "utf-8");
                String pageSize1 = pageSize == null ? "" : urlDecoder.decode(pageSize, "utf-8");
                pd.put("starttime", starttime1);
                pd.put("endtime", endtime1);
                pd.put("pageIndex", pageIndex1);
                pd.put("pageSize", pageSize1);
                page.setPd(pd);
                System.out.println(pd);
                List<PageData> clist = consumerManager.findsbbtry(pd);
                System.out.println(clist);
                //创建excel文件
                HSSFWorkbook wb = new HSSFWorkbook();
                //创建sheet页
                HSSFSheet sheet = wb.createSheet("社保补贴人员");
                //创建标题行
                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("入库时间");
                titleRow.createCell((short) 1).setCellValue("姓名");
                titleRow.createCell((short) 2).setCellValue("联系电话");
                titleRow.createCell((short) 3).setCellValue("备注");

                if (clist.size() > 0) {


                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(pd1.getString("cztime"));
                        dataRow.createCell((short) 1).setCellValue(pd1.getString("name"));
                        dataRow.createCell((short) 2).setCellValue(pd1.getString("tel"));
                        dataRow.createCell((short) 3).setCellValue(pd1.getString("remark"));
                    }

                }
                // 设置下载时客户端Excel的名称
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-sbbtry.xls";
                //设置下载的文件
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//打开流
                wb.write(ouputStream); //在excel内写入流
                ouputStream.flush();// 刷新流
                ouputStream.close();// 关闭流

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/readsbbtryExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readsbbtryExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            System.out.println(request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            String zxyh = pd_token.getString("ZXYH");
            if (pd_token != null) {
                if (null != file && !file.isEmpty()) {
                    String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;                                //文件上传路径
                    String fileName = FileUpload.fileUp(file, filePath, "ComExcel");                            //执行上传
                    List<PageData> listPd = (List) ObjectExcelRead2.readExcel(filePath, fileName, 1, 0, 0);        //执行读EXCEL操作,读出的数据导入List 2:从第3行开始；0:从第A列开始；0:第0个sheet
                    /*检查字段操作======================================*/
                    boolean check = true;
                    String str = "";
//                    for (int i = 0; i < listPd.size(); i++) {
//                        String var0 = listPd.get(i).getString("var0");
//                        String var2 = listPd.get(i).getString("var2");
//                        if (!var0.equals("姓名")) {
//                            check = false;
//                            str = str + "模板格式错误";
//                            break;
//                        }
//                        if (!var2.equals("备注")) {
//                            check = false;
//                            str = str + "模板格式错误";
//                            break;
//                        }
//                    }
                    for (int i = 0; i < listPd.size(); i++) {
                        String var0 = listPd.get(i).getString("var0");
                        String var1 = listPd.get(i).getString("var1");
                        if ("".equals(var0) || var0 == null) {
                            check = false;
                            str = str + "姓名不能为空;";
                            break;
                        } else if ("".equals(var1) || var1 == null) {
                            check = false;
                            str = str + "联系电话不能为空;";
                            break;
                        }

                    }
                    /*存入数据库操作======================================*/
                    if (check == true) {
                        for (int i = 0; i < listPd.size(); i++) {
                            pd.put("cztime", getTime());
                            pd.put("name", listPd.get(i).getString("var0"));
                            pd.put("tel", listPd.get(i).getString("var1"));
                            pd.put("lxtel", listPd.get(i).getString("var1"));
                            pd.put("remark", listPd.get(i).getString("var2"));
                            pd.put("cate", "54acc890c8bc433ca53dc19b06d71857");
                            pd.put("czman", zxyh);
                            pd.put("uid", getUUID32());
                            pd.put("isimpot", "1");
                            consumerManager.savePerson(pd);
                        }
                        json.put("success", "true");
                    } else if (check == false) {
                        json.put("msg", str);
                    }

                }

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }
        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/exportjzbtryExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportjzbtryExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String starttime = pd.getString("starttime");
                String endtime = pd.getString("endtime");
                String level = pd.getString("level");
                String pageIndex = "0";
                String pageSize = "999999999";
                String starttime1 = starttime == null ? "" : urlDecoder.decode(starttime, "utf-8");
                String endtime1 = endtime == null ? "" : urlDecoder.decode(endtime, "utf-8");
                String level1 = level == null ? "" : urlDecoder.decode(level, "utf-8");
                String pageIndex1 = pageIndex == null ? "" : urlDecoder.decode(pageIndex, "utf-8");
                String pageSize1 = pageSize == null ? "" : urlDecoder.decode(pageSize, "utf-8");
                pd.put("starttime", starttime1);
                pd.put("endtime", endtime1);
                pd.put("level", level1);
                pd.put("pageIndex", pageIndex1);
                pd.put("pageSize", pageSize1);
                page.setPd(pd);
                System.out.println(pd);
                List<PageData> clist = consumerManager.findjzbtry(pd);
                System.out.println(clist);

                //创建excel文件
                HSSFWorkbook wb = new HSSFWorkbook();
                //创建sheet页
                HSSFSheet sheet = wb.createSheet("见证补贴人员");
                //创建标题行
                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("入库时间");
                titleRow.createCell((short) 1).setCellValue("姓名");
                titleRow.createCell((short) 2).setCellValue("身份证号码");
                titleRow.createCell((short) 3).setCellValue("工种");
                titleRow.createCell((short) 4).setCellValue("证书");
                titleRow.createCell((short) 5).setCellValue("等级");
                titleRow.createCell((short) 6).setCellValue("联系电话");
                titleRow.createCell((short) 7).setCellValue("所属地区");
                titleRow.createCell((short) 8).setCellValue("备注");
                if (clist.size() > 0) {


                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(pd1.getString("cztime"));
                        dataRow.createCell((short) 1).setCellValue(pd1.getString("name"));
                        dataRow.createCell((short) 2).setCellValue(pd1.getString("cardid"));
                        dataRow.createCell((short) 3).setCellValue(pd1.getString("jobvar"));
                        dataRow.createCell((short) 4).setCellValue(pd1.getString("credenname"));
                        dataRow.createCell((short) 5).setCellValue(pd1.getString("levelname"));
                        dataRow.createCell((short) 6).setCellValue(pd1.getString("tel"));
                        dataRow.createCell((short) 7).setCellValue(pd1.getString("address"));
                        dataRow.createCell((short) 8).setCellValue(pd1.getString("remark"));

                    }

                }
                // 设置下载时客户端Excel的名称
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-jzbtry.xls";
                //设置下载的文件
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//打开流
                wb.write(ouputStream); //在excel内写入流
                ouputStream.flush();// 刷新流
                ouputStream.close();// 关闭流

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/readjzbtryExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readjzbtryExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            System.out.println(request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            String zxyh = pd_token.getString("ZXYH");
            if (pd_token != null) {
                if (null != file && !file.isEmpty()) {
                    String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;                                //文件上传路径
                    String fileName = FileUpload.fileUp(file, filePath, "ComExcel");                            //执行上传
                    List<PageData> listPd = (List) ObjectExcelRead2.readExcel(filePath, fileName, 1, 0, 0);        //执行读EXCEL操作,读出的数据导入List 2:从第3行开始；0:从第A列开始；0:第0个sheet
                    /*检查字段操作======================================*/
                    boolean check = true;
                    String str = "";
//                    for (int i = 0; i < listPd.size(); i++) {
//                        String var0 = listPd.get(i).getString("var0");
//                        String var8 = listPd.get(i).getString("var8");
//                        if (!var0.equals("入库时间")) {
//                            check = false;
//                            str = str + "模板格式错误";
//                            break;
//                        }
//                        if (!var8.equals("备注")) {
//                            check = false;
//                            str = str + "模板格式错误";
//                            break;
//                        }
//                    }
                    for (int i = 0; i < listPd.size(); i++) {
                        String var0 = listPd.get(i).getString("var0");
                        String var1 = listPd.get(i).getString("var1");
                        String var3 = listPd.get(i).getString("var3");
                        String var4 = listPd.get(i).getString("var4");
                        if ("".equals(var0) || var0 == null) {
                            check = false;
                            str = str + "姓名不能为空;";
                            break;
                        } else if ("".equals(var1) || var1 == null) {
                            check = false;
                            str = str + "身份证号码不能为空;";
                            break;
                        } else if ("".equals(var3) || var3 == null) {
                            check = false;
                            str = str + "证书不能为空;";
                            break;
                        } else if ("".equals(var4) || var4 == null) {
                            check = false;
                            str = str + "等级不能为空;";
                            break;
                        }

                        PageData pd1 = new PageData();
                        pd1.put("name",var3);
                        pd1.put("level","031-___");
                        PageData dic = consumerManager.getDIC(pd1);
                        System.out.println(dic);
                        if (dic==null){
                            str = str + "查无此证书;";
                            check = false;
                            break;
                        }
                        PageData pd2 = new PageData();
                        pd2.put("name",var4);
                        pd2.put("level",dic.getString("BIANMA")+"-__");
                        PageData dic2 = consumerManager.getDIC(pd2);
                        if (dic2==null){
                            str = str + "查无此等级;";
                            check = false;
                            break;
                        }
                    }

                    /*存入数据库操作======================================*/
                    if (check == true) {
                        for (int i = 0; i < listPd.size(); i++) {
                            pd.put("cztime", getTime());
                            pd.put("name", listPd.get(i).getString("var0"));
                            pd.put("cardid", listPd.get(i).getString("var1"));
                            String var2 = listPd.get(i).getString("var2");
                            PageData pageData = new PageData();
                            pageData.put("name",var2);
                            PageData getjobtype = consumerManager.getDIC(pageData);
                            if (getjobtype!=null){
                                var2=getjobtype.get("DICTIONARIES_ID").toString();
                            }else {
                                var2="暂无";
                            }
                            pd.put("jobvar", var2);
                            String var3 = listPd.get(i).getString("var3");
                            PageData pd1 = new PageData();
                            pd1.put("name",var3);
                            pd1.put("level","031-___");
                            PageData dic = consumerManager.getDIC(pd1);
                            if (dic!=null){
                                pd.put("creden", dic.getString("DICTIONARIES_ID"));
                            }else {
                                str = str + "查无此证书;";
                                json.put("msg", str);
                                break;
                            }
                            String var4 = listPd.get(i).getString("var4");
                            PageData pd2 = new PageData();
                            pd2.put("level",dic.getString("BIANMA")+"-__");
                            pd2.put("name",var4);
                            PageData dic2 = consumerManager.getDIC(pd2);
                            if (dic2!=null){
                                pd.put("level", dic2.getString("DICTIONARIES_ID"));
                            }else {
                                str = str + "查无此等级;";
                                json.put("msg", str);
                                break;
                            }
                            pd.put("tel", listPd.get(i).getString("var5"));
                            pd.put("lxtel", listPd.get(i).getString("var5"));
                            pd.put("jg", listPd.get(i).getString("var6"));
                            pd.put("remark", listPd.get(i).getString("var7"));
                            pd.put("cate", "7b95e900ca3a4eee943cb3ca11e51fd1");
                            pd.put("czman", zxyh);
                            pd.put("uid", getUUID32());
                            pd.put("isimpot", "1");
//                            consumerManager.insertjzbtry(pd);
                            consumerManager.savePerson(pd);
                            trainrecoService.insertTrainreco(pd);
                        }
                        json.put("success", "true");
                    } else if (check == false) {
                        json.put("msg", str);
                    }

                }

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }
        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/exportemployregExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportemployregExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                PageData pd = new PageData();
                URLDecoder urlDecoder = new URLDecoder();
                String name = pd.getString("name");
                String qytype = pd.getString("qytype");
                String lxr = pd.getString("lxr");
                String lxtel = pd.getString("lxtel");
                String keywords = pd.getString("keywords");

                String name1 = name == null ? "" : urlDecoder.decode(name, "utf-8");
                String qytype1 = qytype == null ? "" : urlDecoder.decode(qytype, "utf-8");
                String lxr1 = lxr == null ? "" : urlDecoder.decode(lxr, "utf-8");
                String lxtel1 = lxtel == null ? "" : urlDecoder.decode(lxtel, "utf-8");
                String keywords1 = keywords == null ? "" : urlDecoder.decode(keywords, "utf-8");

                pd.put("name", name1);
                pd.put("qytype", qytype1);
                pd.put("lxr", lxr1);
                pd.put("lxtel", lxtel1);
                pd.put("keywords", keywords1);

                System.out.println(pd);
                List<PageData> clist = consumerManager.findemployreg(pd);

                //创建excel文件
                HSSFWorkbook wb = new HSSFWorkbook();
                //创建sheet页
                HSSFSheet sheet = wb.createSheet("企业招聘信息");
                //创建标题行
                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("序号");
                titleRow.createCell((short) 1).setCellValue("登记时间");
                titleRow.createCell((short) 2).setCellValue("企业名称");
                titleRow.createCell((short) 3).setCellValue("联系人");
                titleRow.createCell((short) 4).setCellValue("联系电话");
                titleRow.createCell((short) 5).setCellValue("企业地址");
                titleRow.createCell((short) 6).setCellValue("招聘工种");
                titleRow.createCell((short) 7).setCellValue("招工人数");
                titleRow.createCell((short) 8).setCellValue("岗位要求");

                titleRow.createCell((short) 9).setCellValue("工资待遇");
                titleRow.createCell((short) 10).setCellValue("用工推荐");
                titleRow.createCell((short) 11).setCellValue("已推荐人员量");
                if (clist.size() > 0) {


                    for (PageData pageData : clist) {
                        String uid = pageData.getString("uid");
                        PageData data = new PageData();
                        data.put("uid", uid);
                        List<PageData> employ = consumerManager.findemployreg(data);
                        List<PageData> company = consumerManager.findcompany(data);
                        for (PageData pd1 : employ) {
                            HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                            dataRow.createCell((short) 0).setCellValue(sheet.getLastRowNum());
                            dataRow.createCell((short) 1).setCellValue(company.get(0).getString("czdate"));
                            dataRow.createCell((short) 2).setCellValue(company.get(0).getString("name"));
                            dataRow.createCell((short) 3).setCellValue(company.get(0).getString("lxr"));
                            dataRow.createCell((short) 4).setCellValue(company.get(0).getString("lxtel"));
                            dataRow.createCell((short) 5).setCellValue(company.get(0).getString("addr"));

                            dataRow.createCell((short) 6).setCellValue(pd1.getString("gwflname"));
                            dataRow.createCell((short) 7).setCellValue(pd1.getString("zgrs"));
                            dataRow.createCell((short) 8).setCellValue(pd1.getString("gwyq"));
                            dataRow.createCell((short) 9).setCellValue(pd1.getString("gzdyname"));
                            Page page = new Page();
                            page.setCurrentPage(1);
                            page.setShowCount(999999);
                            PageData pageData1 = new PageData();
                            pageData1.put("uid",pd1.getString("uid"));
                            page.setPd(pageData1);
                            List<PageData> listYgtj = companyService.listYgtj(page);
                            ArrayList<String> Ygtj = new ArrayList<>();
                            for (PageData data1 : listYgtj) {
                                Ygtj.add(data1.getString("personname"));
                            }
                            String Ygtjstring = Ygtj.toString().substring(1, Ygtj.toString().length() - 1);
                            dataRow.createCell((short) 10).setCellValue(Ygtjstring);
                            List<PageData> referlist = jobReferManager.PersonreferlistPage(page);

                            dataRow.createCell((short) 11).setCellValue(referlist.size());

                        }
                    }


                }
                // 设置下载时客户端Excel的名称
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-company.xls";
                //设置下载的文件
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//打开流
                wb.write(ouputStream); //在excel内写入流
                ouputStream.flush();// 刷新流
                ouputStream.close();// 关闭流

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/exportcompanyExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportcompanyExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String name = pd.getString("name");
                String qytype = pd.getString("qytype");
                String lxr = pd.getString("lxr");
                String lxtel = pd.getString("lxtel");
                String keywords = pd.getString("keywords");
                String pageIndex = "0";
                String pageSize = "999999999";
                String name1 = name == null ? "" : urlDecoder.decode(name, "utf-8");
                String qytype1 = qytype == null ? "" : urlDecoder.decode(qytype, "utf-8");
                String lxr1 = lxr == null ? "" : urlDecoder.decode(lxr, "utf-8");
                String lxtel1 = lxtel == null ? "" : urlDecoder.decode(lxtel, "utf-8");
                String keywords1 = keywords == null ? "" : urlDecoder.decode(keywords, "utf-8");

                String pageIndex1 = name == null ? "" : urlDecoder.decode(pageIndex, "utf-8");
                String pageSize1 = name == null ? "" : urlDecoder.decode(pageSize, "utf-8");
                pd.put("name", name1);
                pd.put("qytype", qytype1);
                pd.put("lxr", lxr1);
                pd.put("lxtel", lxtel1);
                pd.put("keywords", keywords1);

                pd.put("pageIndex", pageIndex1);
                pd.put("pageSize", pageSize1);
                page.setPd(pd);
                System.out.println(pd);
                List<PageData> clist = consumerManager.findcompany(pd);

                //创建excel文件
                HSSFWorkbook wb = new HSSFWorkbook();
                //创建sheet页
                HSSFSheet sheet = wb.createSheet("企业招聘信息");
                //创建标题行
                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("企业编号");
                titleRow.createCell((short) 1).setCellValue("企业名称");
                titleRow.createCell((short) 2).setCellValue("企业类型");
                titleRow.createCell((short) 3).setCellValue("联系人");
                titleRow.createCell((short) 4).setCellValue("联系电话");
                titleRow.createCell((short) 5).setCellValue("备用联系人");
                titleRow.createCell((short) 6).setCellValue("备用联系电话");
                titleRow.createCell((short) 7).setCellValue("企业地址");
                titleRow.createCell((short) 8).setCellValue("企业邮箱");

                titleRow.createCell((short) 9).setCellValue("招聘工种");
                titleRow.createCell((short) 10).setCellValue("岗位性质");
                titleRow.createCell((short) 11).setCellValue("招工人数");
                titleRow.createCell((short) 12).setCellValue("岗位要求");
                titleRow.createCell((short) 13).setCellValue("学历要求");
                titleRow.createCell((short) 14).setCellValue("专业要求");
                titleRow.createCell((short) 15).setCellValue("性别要求");
                titleRow.createCell((short) 16).setCellValue("年龄要求");
                titleRow.createCell((short) 17).setCellValue("工资待遇");
                titleRow.createCell((short) 18).setCellValue("其他说明");
                if (clist.size() > 0) {


                    for (PageData pageData : clist) {
                        String uid = pageData.getString("uid");
                        PageData data = new PageData();
                        data.put("uid", uid);
                        List<PageData> employ = consumerManager.findemployreg(data);
                        List<PageData> company = consumerManager.findcompany(data);
                        for (PageData pd1 : employ) {
                            HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                            dataRow.createCell((short) 0).setCellValue(sheet.getLastRowNum());
                            dataRow.createCell((short) 1).setCellValue(company.get(0).getString("name"));
                            dataRow.createCell((short) 2).setCellValue(company.get(0).getString("qytypename"));
                            dataRow.createCell((short) 3).setCellValue(company.get(0).getString("lxr"));
                            dataRow.createCell((short) 4).setCellValue(company.get(0).getString("lxtel"));
                            dataRow.createCell((short) 5).setCellValue(company.get(0).getString("bylxr"));
                            dataRow.createCell((short) 6).setCellValue(company.get(0).getString("bylxtel"));
                            dataRow.createCell((short) 7).setCellValue(company.get(0).getString("addr"));
                            dataRow.createCell((short) 8).setCellValue(company.get(0).getString("email"));

                            dataRow.createCell((short) 9).setCellValue(pd1.getString("gwflname"));
                            dataRow.createCell((short) 10).setCellValue(pd1.getString("jobtypename"));
                            dataRow.createCell((short) 11).setCellValue(pd1.getString("zgrs"));
                            dataRow.createCell((short) 12).setCellValue(pd1.getString("gwyq"));
                            dataRow.createCell((short) 13).setCellValue(pd1.getString("xlname"));
                            dataRow.createCell((short) 14).setCellValue(pd1.getString("zyyq"));
                            String sex = pd1.getString("sex");
                            if("1".equals(sex)){
                                sex="男";
                            }else if ("2".equals(sex)){
                                sex="女";
                            }else{
                                sex="均可";
                            }
                            dataRow.createCell((short) 15).setCellValue(sex);
                            dataRow.createCell((short) 16).setCellValue(pd1.getString("age"));
                            dataRow.createCell((short) 17).setCellValue(pd1.getString("gzdyname"));
                            dataRow.createCell((short) 18).setCellValue(pd1.getString("remark"));

                        }
                    }


                }
                // 设置下载时客户端Excel的名称
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-company.xls";
                //设置下载的文件
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//打开流
                wb.write(ouputStream); //在excel内写入流
                ouputStream.flush();// 刷新流
                ouputStream.close();// 关闭流

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/readcompanyExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readcompanyExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
        PageData pd_stoken = new PageData();
        pd_stoken.put("TOKENID", request.getParameter("tokenid"));
        System.out.println(request.getParameter("tokenid"));
        PageData pd_token = zxlbService.findByTokenId(pd_stoken);
        String czman = pd_stoken.getString("ZXYH");
        if (pd_token != null) {
            System.out.println(file);
            if (null != file && !file.isEmpty()) {
                String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;                                //文件上传路径
                String fileName = FileUpload.fileUp(file, filePath, "ComExcel");                            //执行上传
                List<PageData> listPd = (List) ObjectExcelRead2.readExcel(filePath, fileName, 1, 0, 0);        //执行读EXCEL操作,读出的数据导入List 2:从第3行开始；0:从第A列开始；0:第0个sheet
                /*检查字段操作======================================*/
                boolean check = true;
                String str = "";

                for (int i = 0; i < listPd.size(); i++) {
                    String var1 = listPd.get(i).getString("var1");
                    String var3 = listPd.get(i).getString("var3");
                    String var4 = listPd.get(i).getString("var4");
                    String var9 = listPd.get(i).getString("var9");
                    String var16 = listPd.get(i).getString("var16");
                    if ("".equals(var1) || var1 == null) {
                        check = false;
                        str = str + "企业名称不能为空;";
                        break;
                    } else if ("".equals(var3) || var3 == null) {
                        check = false;
                        str = str + "联系人不能为空;";
                        break;
                    } else if ("".equals(var4) || var4 == null) {
                        check = false;
                        str = str + "联系电话不能为空;";
                        break;
                    }
//                    else if ("".equals(var9) || var9 == null) {
//                        check = false;
//                        str = str + "招聘工种不能为空;";
//                        break;
//                    } else if (var16.equals("") ) {
//                        check = false;
//                        str = str + "年龄不能为空;";
//                        break;
//                    }
//                        String var2 = listPd.get(i).getString("var2");
//                        PageData pd1 = new PageData();
//                        pd1.put("name",var2);
//                        PageData dic = consumerManager.getDIC(pd1);
//                        if (dic==null){
//                            str = str + "查无此企业类型;";
//                            check = false;
//                            break;
//                        }
//
//                        String var10 = listPd.get(i).getString("var10");
//                        PageData pd2 = new PageData();
//                        pd2.put("name",var10);
//                        System.out.println(var10);
//                        PageData dic3 = consumerManager.getDIC(pd2);
//                        if (dic3==null){
//                            str = str + "查无此岗位性质;";
//                            check = false;
//                            break;
//                        }
//
//                        PageData pd3 = new PageData();
//                        pd3.put("gwflname",var9);
//
//                        PageData getjobtype = consumerManager.getjobtype(pd3);
//                        if (getjobtype==null) {
//                            str = str + "查无此岗位工种;";
//                            check = false;
//                            break;
//                        }
//                        String var13 = listPd.get(i).getString("var13");
//                        PageData pd4 = new PageData();
//                        pd4.put("name",var13);
//                        PageData dic4 = consumerManager.getDIC(pd4);
//                        if (dic4==null) {
//                            str = str + "查无此学历;";
//                            check = false;
//                            break;
//                        }
//                        String var17 = listPd.get(i).getString("var17");
//                        PageData pd5 = new PageData();
//                        pd5.put("name",var17);
//                        PageData dic5 = consumerManager.getDIC(pd5);
//                        if (dic5==null) {
//                            str = str + "查无此工资待遇;";
//                            check = false;
//                            break;
//                        }

                }

                if (check == true) {
                    System.out.println("执行了2");

                    /*存入数据库操作======================================*/
                    for (int i = 0; i < listPd.size(); i++) {
                        PageData pageData = new PageData();
                        String tel = listPd.get(i).getString("var4") == null ? "" : listPd.get(i).getString("var4").replace("-", "");
                        String var1 = listPd.get(i).getString("var1").trim();
                        pageData.put("tel", tel);
                        pageData.put("name", var1);
                        List<PageData> findcompany = consumerManager.findcompany(pageData);
                        System.out.println(findcompany);

                        if (findcompany.isEmpty() ) {
                            PageData data1 = new PageData();
                            data1.put("uid", this.getUUID32());
                            data1.put("name", listPd.get(i).getString("var1"));

                            String var2 = listPd.get(i).getString("var2");
                            PageData pd1 = new PageData();
                            pd1.put("name",var2);
                            PageData dic = consumerManager.getDIC(pd1);
                            if (dic!=null){
                                data1.put("qytype", dic.getString("DICTIONARIES_ID"));
                            }else {
//                                    str = str + "查无此企业类型;";
//                                    json.put("msg", str);
//                                    break;
                                data1.put("qytype", "暂无");
                            }
                            data1.put("lxr", listPd.get(i).getString("var3"));
                            String tel2 = listPd.get(i).getString("var4") == null ? "" : listPd.get(i).getString("var4").replace("-", "");
                            data1.put("tel", tel2);
                            data1.put("lxtel", tel2);
                            data1.put("bylxr", listPd.get(i).getString("var5"));
                            String bylxtel = listPd.get(i).getString("var6") == null ? "" : listPd.get(i).getString("var6").replace("-", "");
                            data1.put("bylxtel", bylxtel);
                            data1.put("addr", listPd.get(i).getString("var7"));
                            data1.put("email", listPd.get(i).getString("var8"));
                            data1.put("czman", czman);
                            data1.put("czdate", getTime());
                            data1.put("isimpot", "1");
                            System.out.println(data1);
                            consumerManager.insertcompany(data1);

                        }

                    }
                    for (int i = 0; i < listPd.size(); i++) {
                        PageData pageData = new PageData();
                        String tel = listPd.get(i).getString("var4") == null ? "" : listPd.get(i).getString("var4").replace("-", "");
                        String var1 = listPd.get(i).getString("var1").trim();
                        pageData.put("tel", tel);
                        pageData.put("name", var1);
                        List<PageData> findcompany = consumerManager.findcompany(pageData);
                        if (!findcompany.isEmpty() &&  StringUtils.isNotEmpty(listPd.get(i).getString("var9"))) {
                            PageData data1 = new PageData();
                            data1.put("uid", findcompany.get(0).getString("uid"));
                            String var9 = listPd.get(i).getString("var9");

                            PageData pd1 = new PageData();
                            pd1.put("gwflname",var9);
                            PageData getjobtype = consumerManager.getjobtype(pd1);

                            if (getjobtype!=null){
                                data1.put("jobname", Integer.parseInt(getjobtype.get("code").toString()));
                            }else {
//                                    str = str + "查无此岗位工种;";
//                                    json.put("msg", str);
//                                    break;
                                data1.put("jobname", "暂无");
                            }
                            String var10 = listPd.get(i).getString("var10");
                            PageData pd2 = new PageData();
                            pd2.put("name",var10);
                            pd2.put("bianma","022");
                            PageData dic = consumerManager.getDIC(pd2);
                            if (dic!=null){
                                data1.put("jobtype", dic.getString("DICTIONARIES_ID"));
                            }else {
//                                    str = str + "查无此岗位性质;";
//                                    json.put("msg", str);
//                                    break;
                                data1.put("jobtype", "暂无");
                            }
                            data1.put("zgrs", listPd.get(i).getString("var11"));
                            data1.put("gwyq", listPd.get(i).getString("var12"));
                            String var13 = listPd.get(i).getString("var13");
                            PageData pd3 = new PageData();
                            pd3.put("name",var13);
                            PageData dic3 = consumerManager.getDIC(pd3);
                            if (dic3!=null){
                                data1.put("xl", dic3.getString("DICTIONARIES_ID"));
                            }else {
//                                    str = str + "查无此学历;";
//                                    json.put("msg", str);
//                                    break;
                                data1.put("xl", "暂无");
                            }
                            data1.put("zyyq", listPd.get(i).getString("var14"));
                            String var15 = listPd.get(i).getString("var15");
                            if (var15.equals("男")){
                                data1.put("sex", "1");
                            }else if (var15.equals("女")){
                                data1.put("sex", "2");
                            }else if (var15.equals("均可")){
                                data1.put("sex", "0");
                            }
//                                PageData pd4 = new PageData();
//                                pd4.put("name",var15);
//                                PageData dic4 = consumerManager.getDIC(pd4);
//                                if (dic4!=null){
//                                    data1.put("sex", dic4.getString("DICTIONARIES_ID"));
//                                }else {
//                                   str = str + "查无此学历;";
//                                   json.put("msg", str);
//                                   break;
//                                    data1.put("sex", "");
//                                }
                            String var16 = listPd.get(i).getString("var16");
                            if (var16.contains("-")){
                                String[] split = var16.split("-");
                                data1.put("agestart", split[0]);
                                data1.put("ageend", split[1]);
                            }else if (var16.equals("不限")){
                                data1.put("agestart", 0);
                                data1.put("ageend", 100);
                            }else {

                            }


                            String var17 = listPd.get(i).getString("var17");
                            PageData pd5 = new PageData();
                            pd5.put("name",var17);
                            PageData dic5 = consumerManager.getDIC(pd5);
                            if (dic5!=null){
                                data1.put("gzdy", dic5.getString("DICTIONARIES_ID"));
                            }else {
//                                    str = str + "查无此工资待遇;";
//                                    json.put("msg", str);
//                                    break;
                                data1.put("gzdy", "暂无");
                            }

                            data1.put("remark", listPd.get(i).getString("var18"));
                            data1.put("czman", czman);
                            data1.put("czdate", getTime());
                            data1.put("isimpot", "1");
                            System.out.println(data1);
                            consumerManager.insertemployreg(data1);
                            System.out.println("执行了3");
                        }
                    }

                    json.put("success", "true");
                } else if (check == false) {
                    json.put("msg", str);
                }
            }

        } else {
            json.put("success", "false");
            json.put("msg", "登录超时，请重新登录");
        }
        } catch (Exception e) {
            System.out.println("执行了4");
            json.put("success", "false");
        }
        return json.toString();
    }


    @RequestMapping(value = "/exportpersonExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public JSONObject exportpersonExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        System.out.println(request.getParameter("tokenid"));
//        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                PageData pd = new PageData();
                URLDecoder urlDecoder = new URLDecoder();
                String name = pd.getString("name");
                String age = pd.getString("age");
                String sex = pd.getString("sex");
                String xl = pd.getString("xl");
                String isjob = pd.getString("isjob");
                String jobtype = pd.getString("jobtype");
                String jobname = pd.getString("jobname");
                String qwxz = pd.getString("qwxz");
                String name1 = name == null ? "" : urlDecoder.decode(name, "utf-8");
                String age1 = age == null ? "" : urlDecoder.decode(age, "utf-8");
                String sex1 = sex == null ? "" : urlDecoder.decode(sex, "utf-8");
                String xl1 = xl == null ? "" : urlDecoder.decode(xl, "utf-8");
                String isjob1 = isjob == null ? "" : urlDecoder.decode(isjob, "utf-8");
                String jobtype1 = jobtype == null ? "" : urlDecoder.decode(jobtype, "utf-8");
                String jobname1 = jobname == null ? "" : urlDecoder.decode(jobname, "utf-8");
                String qwxz1 = qwxz == null ? "" : urlDecoder.decode(qwxz, "utf-8");
                pd.put("name", name1);
                pd.put("age", age1);
                pd.put("sex", sex1);
                pd.put("xl", xl1);
                pd.put("isjob", isjob1);
                pd.put("jobtype", jobtype1);
                pd.put("jobname", jobname1);
                pd.put("qwxz", qwxz1);
                System.out.println(pd);
                List<PageData> clist = jobReferManager.getjob(pd);

                System.out.println(clist);
                //创建excel文件
                HSSFWorkbook wb = new HSSFWorkbook();
                //创建sheet页
                HSSFSheet sheet = wb.createSheet("求职登记汇总");
                //创建标题行
                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("序号");
                titleRow.createCell((short) 1 ).setCellValue("求职时间");
                titleRow.createCell((short) 2 ).setCellValue("人员类型");
                titleRow.createCell((short) 3 ).setCellValue("姓名");
                titleRow.createCell((short) 4 ).setCellValue("身份证号");
                titleRow.createCell((short) 5 ).setCellValue("性别");
                titleRow.createCell((short) 6 ).setCellValue("年龄");
                titleRow.createCell((short) 7 ).setCellValue("联系电话");
                titleRow.createCell((short) 8 ).setCellValue("学历");
                titleRow.createCell((short) 9 ).setCellValue("专业");
                titleRow.createCell((short) 10).setCellValue("求职岗位");
                titleRow.createCell((short) 11).setCellValue("期望薪资");
                titleRow.createCell((short) 12).setCellValue("推荐企业");
                titleRow.createCell((short) 13).setCellValue("已推荐企业量");
                if (clist.size() > 0) {


                    for (PageData pd1 : clist) {

                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(sheet.getLastRowNum());
                        dataRow.createCell((short) 1).setCellValue(pd1.getString("czdate"));
                        dataRow.createCell((short) 2).setCellValue(pd1.getString("catename"));
                        dataRow.createCell((short) 3).setCellValue(pd1.getString("name"));
                        dataRow.createCell((short) 4).setCellValue(pd1.getString("cardid"));
                        String sex2 = pd1.getString("sex");
                        if("1".equals(sex2)){
                            sex2="男";
                        }else if ("2".equals(sex2)){
                            sex2="女";
                        }else{
                            sex2="";
                        }
                        dataRow.createCell((short) 5).setCellValue(sex2);

                        dataRow.createCell((short)6 ).setCellValue(pd1.getString("age"));
                        dataRow.createCell((short)7 ).setCellValue(pd1.getString("lxtel"));
                        dataRow.createCell((short)8 ).setCellValue(pd1.getString("xlname"));
                        dataRow.createCell((short)9 ).setCellValue(pd1.getString("zy"));
                        dataRow.createCell((short)10).setCellValue(pd1.getString("gwflname"));
                        dataRow.createCell((short)11).setCellValue(pd1.getString("qwxzname"));


                        Page page = new Page();
                        page.setCurrentPage(1);
                        page.setShowCount(999999);
                        PageData pageData = new PageData();
                        pageData.put("uid",pd1.getString("uid"));
                        page.setPd(pageData);
                        List<PageData> listJytj = companyService.listJytj(page);
                        ArrayList<String> Jytj = new ArrayList<>();
                        for (PageData data : listJytj) {
                            Jytj.add(data.getString("companyname"));
                        }
                        String Jytjstring = Jytj.toString().substring(1, Jytj.toString().length() - 1);
                        dataRow.createCell((short) 12).setCellValue(Jytjstring);
                        List<PageData> referlist = jobReferManager.JobreferlistPage(page);

                        dataRow.createCell((short) 13).setCellValue(referlist.size());
                    }



                }
                // 设置下载时客户端Excel的名称
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-qzdj.xls";
                //设置下载的文件
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//打开流
                wb.write(ouputStream); //在excel内写入流
                ouputStream.flush();// 刷新流
                ouputStream.close();// 关闭流

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }

//        } catch (Exception e) {
//            json.put("success", "false");
//        }
        return json;
    }


    @RequestMapping(value = "/readpersonExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readpersonExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            System.out.println(request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            String czman = pd_stoken.getString("ZXYH");
            if (pd_token != null) {
                if (null != file && !file.isEmpty()) {
                    String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;                                //文件上传路径
                    String fileName = FileUpload.fileUp(file, filePath, "Excel");                            //执行上传
                    List<PageData> listPd = (List) ObjectExcelRead2.readExcel(filePath, fileName, 1, 0, 0);        //执行读EXCEL操作,读出的数据导入List 2:从第3行开始；0:从第A列开始；0:第0个sheet
                    /*检查字段操作======================================*/
                    boolean check = true;
                    String str = "";
                    System.out.println("执行了1");
                    for (int i = 0; i < listPd.size(); i++) {

                        String var0 = listPd.get(i).getString("var0");
                        String var2 = listPd.get(i).getString("var2");
                        String var3 = listPd.get(i).getString("var3");
                        String var4 = listPd.get(i).getString("var4");
                        String var11 = listPd.get(i).getString("var11");
                        System.out.println(var0);
                        System.out.println(var2);
                        System.out.println(var3);
                        System.out.println(var4);
                        System.out.println(var11);
                        if ("".equals(var0) || var0 == null) {
                            check = false;
                            str = str + "姓名不能为空;";
                            break;
                        } else if ("".equals(var2) || var2 == null) {
                            check = false;
                            str = str + "性别不能为空;";
                            break;
                        } else if ("".equals(var3) || var3 == null) {
                            check = false;
                            str = str + "年龄不能为空;";
                            break;
                        } else if ("".equals(var4) || var4 == null) {
                            check = false;
                            str = str + "联系电话不能为空;";
                            break;
                        } else if ("".equals(var11) || var11 == null) {
                            check = false;
                            str = str + "岗位名称不能为空;";
                            break;
                        }

//                        String var5 = listPd.get(i).getString("var5");
//                        PageData pd1 = new PageData();
//                        pd1.put("name",var5);
//                        PageData dic1 = consumerManager.getDIC(pd1);
//                        if (dic1==null){
//                            str = str + "查无此学历;";
//                            check = false;
//                            break;
//                        }
//                        String var8 = listPd.get(i).getString("var8");
//                        PageData pd2 = new PageData();
//                        pd2.put("name",var8);
//                        PageData dic2 = consumerManager.getDIC(pd2);
//                        if (dic2==null){
//                            str = str + "查无此就业状态;";
//                            check = false;
//                            break;
//                        }
//                        String var10 = listPd.get(i).getString("var10");
//                        PageData pd9 = new PageData();
//                        pd9.put("name",var10);
//                        PageData dic = consumerManager.getDIC(pd9);
//
//                        if (dic==null){
//                            str = str + "查无此岗位性质;";
//                            check = false;
//                            break;
//                        }
//
//                        PageData pd3 = new PageData();
//                        pd3.put("gwflname",var11);
//                        PageData getjobtype = consumerManager.getjobtype(pd3);
//
//                        if (getjobtype==null){
//                            str = str + "查无此岗位名称;";
//                            check = false;
//                            break;
//                        }
//                        String var12 = listPd.get(i).getString("var12");
//                        PageData pd4 = new PageData();
//                        pd4.put("name",var12);
//                        PageData dic3 = consumerManager.getDIC(pd4);
//                        if (dic3!=null){
//                            str = str + "查无此期望薪资;";
//                            check = false;
//                            break;
//                        }
                    }
                    System.out.println(check);
                    if (check == true) {
                        /*存入数据库操作======================================*/
                        for (int i = 0; i < listPd.size(); i++) {
                            PageData pageData = new PageData();
                            String var4 = listPd.get(i).getString("var4").trim();
                            String var0 = listPd.get(i).getString("var0").trim();
                            pageData.put("tel", var4);
                            pageData.put("name", var0);
                            System.out.println(pageData);
                            List<PageData> findperson = jobReferManager.findperson(pageData);
                            System.out.println(findperson);
                            if (findperson.isEmpty()) {
                                PageData data1 = new PageData();
                                data1.put("uid", this.getUUID32());
                                data1.put("name", listPd.get(i).getString("var0"));
                                data1.put("cardid", listPd.get(i).getString("var1"));
                                String var2 = listPd.get(i).getString("var2");
                                String sex ="";
                                if (var2.equals("男")){
                                    sex="1";
                                }else if(var2.equals("女")){
                                    sex="2";
                                }
                                data1.put("sex", sex);
                                data1.put("age", listPd.get(i).getString("var3"));
                                data1.put("tel", listPd.get(i).getString("var4"));
                                data1.put("lxtel", listPd.get(i).getString("var4"));
                                String var5 = listPd.get(i).getString("var5");
                                PageData pd1 = new PageData();
                                pd1.put("name",var5);
                                PageData dic1 = consumerManager.getDIC(pd1);
                                if (dic1!=null){
                                    data1.put("xl", dic1.getString("DICTIONARIES_ID"));
                                }else {
//                                    str = str + "查无此学历;";
//                                    json.put("msg", str);
//                                    break;
                                    data1.put("xl", "暂无");
                                }

                                data1.put("zy", listPd.get(i).getString("var6"));
                                data1.put("jg", listPd.get(i).getString("var7"));
                                String var8 = listPd.get(i).getString("var8");
                                if ("就业".equals(var8)){
                                    data1.put("isjob", "1");
                                }else if("失业".equals(var8)){
                                    data1.put("isjob", "0");
                                }else if("无意向就业".equals(var8)){
                                    data1.put("isjob", "2");
                                }else if("灵活就业".equals(var8)){
                                    data1.put("isjob", "3");
                                }else if("自主创业".equals(var8)){
                                    data1.put("isjob", "4");
                                }else {
                                    data1.put("isjob", "暂无");
                                }

//                                PageData pd2 = new PageData();
//                                pd2.put("name",var8);
//                                PageData dic2 = consumerManager.getDIC(pd2);
//                                if (dic2!=null){
//                                    data1.put("isjob", dic2.getString("DICTIONARIES_ID"));
//                                }else {
//                                    str = str + "查无此就业;";
//                                    json.put("msg", str);
//                                    break;
//                                    data1.put("isjob", "");
//                                }
                                data1.put("email", listPd.get(i).getString("var9"));
                                data1.put("czman", czman);
                                data1.put("czdate", getTime());
                                data1.put("isimpot", "1");
                                jobReferManager.insertperson(data1);
                                System.out.println("执行了2");
                            }

                        }
                        for (int i = 0; i < listPd.size(); i++) {
                            PageData pageData = new PageData();
                            String var4 = listPd.get(i).getString("var4").trim();
                            String var0 = listPd.get(i).getString("var0").trim();
                            pageData.put("tel", var4);
                            pageData.put("name", var0);
                            List<PageData> findperson = jobReferManager.findperson(pageData);
                            System.out.println(findperson);

                            if (!findperson.isEmpty()) {
                                PageData data1 = new PageData();
                                data1.put("uid", findperson.get(0).getString("uid"));
                                String var10 = listPd.get(i).getString("var10");
                                PageData pd1 = new PageData();
                                pd1.put("name",var10);
                                PageData dic = consumerManager.getDIC(pd1);

                                if (dic!=null){
                                    data1.put("jobtype", dic.getString("DICTIONARIES_ID"));
                                }else {
//                                    str = str + "查无此岗位工种;";
//                                    json.put("msg", str);
//                                    break;
                                    data1.put("jobtype", "暂无");
                                }

                                String var11 = listPd.get(i).getString("var11");
                                PageData pd2 = new PageData();
                                pd2.put("gwflname",var11);
                                PageData getjobtype = consumerManager.getjobtype(pd2);

                                if (getjobtype!=null){
                                    data1.put("jobname", Integer.parseInt(getjobtype.get("code").toString()));
                                }else {
//                                    str = str + "查无此岗位性质;";
//                                    json.put("msg", str);
//                                    break;
                                    data1.put("jobname", "暂无");
                                }
                                String var12 = listPd.get(i).getString("var12");
                                PageData pd3 = new PageData();
                                pd3.put("name",var12);
                                PageData dic2 = consumerManager.getDIC(pd3);
                                if (dic2!=null){
                                    data1.put("qwxz", dic2.getString("DICTIONARIES_ID"));
                                }else {
//                                    str = str + "查无此期望薪资;";
//                                    json.put("msg", str);
//                                    break;
                                    data1.put("qwxz", "暂无");
                                }


                                data1.put("jobaddr", listPd.get(i).getString("var13"));
                                data1.put("remark", listPd.get(i).getString("var14"));
                                data1.put("isvalid", "1");
                                data1.put("czman", czman);
                                data1.put("czdate", getTime());
                                data1.put("isimpot", "1");
                                jobReferManager.insertjobreg(data1);
                                System.out.println("执行了3");
                            }
                        }
                        json.put("success", "true");

                    } else if (check == false) {
                        json.put("msg", str);
                    }
                }else {
                    json.put("msg", "暂无数据");
                }

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }
        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    //通讯录导入
    @RequestMapping(value = "/readaddrExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readaddrExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            System.out.println(request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                System.out.println(file);
                if (null != file && !file.isEmpty()) {
                    String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;                                //文件上传路径
                    String fileName = FileUpload.fileUp(file, filePath, "Excel");                            //执行上传
                    List<PageData> listPd = (List) ObjectExcelRead2.readExcel(filePath, fileName, 1, 0, 0);        //执行读EXCEL操作,读出的数据导入List 2:从第3行开始；0:从第A列开始；0:第0个sheet
                    /*存入数据库操作======================================*/
                    for (int i = 0; i < listPd.size(); i++) {
                        pd.put("office", listPd.get(i).getString("var1"));
                        pd.put("duty", listPd.get(i).getString("var2"));
                        pd.put("name", listPd.get(i).getString("var3"));
                        pd.put("tel1", listPd.get(i).getString("var4"));
                        pd.put("tel2", listPd.get(i).getString("var5"));
                        jobReferManager.insertaddr(pd);
                    }
                    json.put("success", "true");
                }

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }
        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/exportaddrExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportaddrExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
//        try {
        PageData pd_stoken = new PageData();
        pd_stoken.put("TOKENID", request.getParameter("tokenid"));
        PageData pd_token = zxlbService.findByTokenId(pd_stoken);
        if (pd_token != null) {
            PageData pd = new PageData();
            Page page = new Page();
            URLDecoder urlDecoder = new URLDecoder();
            String starttime = pd.getString("starttime");
            String endtime = pd.getString("endtime");
            String pageIndex = "0";
            String pageSize = "999999999";
            String starttime1 = starttime == null ? "" : urlDecoder.decode(starttime, "utf-8");
            String endtime1 = endtime == null ? "" : urlDecoder.decode(endtime, "utf-8");
            String pageIndex1 = pageIndex == null ? "" : urlDecoder.decode(pageIndex, "utf-8");
            String pageSize1 = pageSize == null ? "" : urlDecoder.decode(pageSize, "utf-8");
            pd.put("starttime", starttime1);
            pd.put("endtime", endtime1);
            pd.put("pageIndex", pageIndex1);
            pd.put("pageSize", pageSize1);
            page.setPd(pd);
            System.out.println(pd);
            List<PageData> clist = jobReferManager.findaddr(pd);
            //创建excel文件
            HSSFWorkbook wb = new HSSFWorkbook();
            //创建sheet页
            HSSFSheet sheet = wb.createSheet("通讯录");
            //创建标题行
            HSSFRow titleRow = sheet.createRow(0);
            titleRow.createCell((short) 0).setCellValue("序号");
            titleRow.createCell((short) 1).setCellValue("办公室");
            titleRow.createCell((short) 2).setCellValue("职责范围");
            titleRow.createCell((short) 3).setCellValue("姓名");
            titleRow.createCell((short) 4).setCellValue("办公电话1");
            titleRow.createCell((short) 5).setCellValue("办公电话2");
            System.out.println(clist);
            if (clist.size() > 0) {


                int count = 1;
                for (PageData pd1 : clist) {
                    HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                    dataRow.createCell((short) 0).setCellValue(count);
                    count++;
                    dataRow.createCell((short) 1).setCellValue(pd1.getString("office"));
                    dataRow.createCell((short) 2).setCellValue(pd1.getString("duty"));
                    dataRow.createCell((short) 3).setCellValue(pd1.getString("name"));
                    dataRow.createCell((short) 4).setCellValue(pd1.getString("tel1"));
                    dataRow.createCell((short) 5).setCellValue(pd1.getString("tel2"));
                }

            }
            // 设置下载时客户端Excel的名称
            String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-txl.xls";
            //设置下载的文件
            System.out.println(filename);
            response.setCharacterEncoding("UTF-8");
            response.setContentType("application/vnd.ms-excel");
            response.setHeader("Content-disposition", "attachment;filename=" + filename);
            OutputStream ouputStream = response.getOutputStream();//打开流
            wb.write(ouputStream); //在excel内写入流
            ouputStream.flush();// 刷新流
            ouputStream.close();// 关闭流

        } else {
            json.put("success", "false");
            json.put("msg", "登录超时，请重新登录");
        }

//        } catch (Exception e) {
//            json.put("success", "false");
//        }
        return json.toString();
    }

    //知识库导入
    @RequestMapping(value = "/readdocExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readdocExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            String createman = request.getParameter("czman");
            String doctype_id = request.getParameter("doctype_id");
            System.out.println(request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            System.out.println("执行了");
            if (pd_token != null) {
                System.out.println(file);
                if (null != file && !file.isEmpty()) {
                    String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;                                //文件上传路径
                    String fileName = FileUpload.fileUp(file, filePath, "Excel");                            //执行上传
                    List<PageData> listPd = (List) ObjectExcelRead.readExcel(filePath, fileName, 1, 0, 0);        //执行读EXCEL操作,读出的数据导入List 2:从第3行开始；0:从第A列开始；0:第0个sheet

                    /*检查字段操作======================================*/
                    boolean check = true;
                    String str = "";
                    for (int i = 0; i < listPd.size(); i++) {
                        String var0 = listPd.get(i).getString("var0");
                        String var1 = listPd.get(i).getString("var1");
                        String var2 = listPd.get(i).getString("var2");
                        String var3 = listPd.get(i).getString("var3");
                        if ("".equals(var0) || var0 == null) {
                            check = false;
                            str = str + "知识标题不能为空";
                            break;
                        }
                        if ("".equals(var1) || var1 == null) {
                            check = false;
                            str = str + "知识内容不能为空";
                            break;
                        }
                        if ("".equals(var2) || var2 == null) {
                            check = false;
                            str = str + "有效期不能为空";
                            break;
                        }
                        if ("".equals(var3) || var3 == null) {
                            check = false;
                            str = str + "是否热点不能为空";
                            break;
                        }
                        if (doctype_id==null){
                            check = false;
                            str = str + "请先选择知识库分类";
                            break;
                        }
                    }

                    if (check==true){
                        /*存入数据库操作======================================*/
                        for (int i = 0; i < listPd.size(); i++) {
                            pd.put("doctype_id", doctype_id);
                            pd.put("doctitle", listPd.get(i).getString("var0"));
                            pd.put("doccont", listPd.get(i).getString("var1"));
                            pd.put("validate", listPd.get(i).getString("var2"));
                            String var3 = listPd.get(i).getString("var3");
                            String ishot = var3.equals("是") ? "1" : "0";
                            pd.put("ishot", ishot);
                            pd.put("createman",createman);
                            pd.put("createdate",getTime());
                            jobReferManager.importdoc(pd);
                        }
                        json.put("success", "true");
                    } else if (check == false) {
                        json.put("msg", str);
                    }

                }

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }
        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }
    //短息记录导出
    @RequestMapping(value = "/exportmsglogExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public void exportmsglogExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
//        try {
        PageData pd_stoken = new PageData();
        pd_stoken.put("TOKENID", request.getParameter("tokenid"));
        PageData pd_token = zxlbService.findByTokenId(pd_stoken);
        if (pd_token != null) {
            PageData pd = new PageData();
            Page page = new Page();
            URLDecoder urlDecoder = new URLDecoder();
            String starttime = pd.getString("starttime");
            String endtime = pd.getString("endtime");
            String sendman = pd.getString("sendman");
            String phone = pd.getString("phone");
            String acceptman = pd.getString("acceptman");
            String keywords = pd.getString("keywords");
            String starttime1 = starttime == null ? "" : urlDecoder.decode(starttime, "utf-8");
            String endtime1 = endtime == null ? "" : urlDecoder.decode(endtime, "utf-8");
            String sendman1 = sendman == null ? "" : urlDecoder.decode(sendman, "utf-8");
            String phone1 = phone == null ? "" : urlDecoder.decode(phone, "utf-8");
            String acceptman1 = acceptman == null ? "" : urlDecoder.decode(acceptman, "utf-8");
            String keywords1 = keywords == null ? "" : urlDecoder.decode(keywords, "utf-8");
            pd.put("starttime", starttime1);
            pd.put("endtime", endtime1);
            pd.put("sendman", sendman1);
            pd.put("phone", phone1);
            pd.put("acceptman", acceptman1);
            pd.put("keywords", keywords1);
            pd.put("pageIndex", 0);
            pd.put("pageSize", 9999);
            page.setPd(pd);
            System.out.println(pd);
            List<PageData> clist = msgTempManager.findMsgLogAll(pd);
            System.out.println(clist);
            //创建excel文件
            HSSFWorkbook wb = new HSSFWorkbook();
            //创建sheet页
            HSSFSheet sheet = wb.createSheet("短信发送记录");
            //创建标题行
            HSSFRow titleRow = sheet.createRow(0);
            titleRow.createCell((short) 0).setCellValue("序号");
            titleRow.createCell((short) 1).setCellValue("发送人");
            titleRow.createCell((short) 2).setCellValue("短信模板");
            titleRow.createCell((short) 3).setCellValue("联系方式");
            titleRow.createCell((short) 4).setCellValue("接受人");
            titleRow.createCell((short) 5).setCellValue("发送时间");
            titleRow.createCell((short) 6).setCellValue("发送方式");
            titleRow.createCell((short) 7).setCellValue("短信内容");
//                titleRow.createCell((short) 5).setCellValue("客户名称");
//                titleRow.createCell((short) 6).setCellValue("客户类别");

            if (clist.size() > 0) {


                int count = 1;
                for (PageData pd1 : clist) {
                    HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                    dataRow.createCell((short) 0).setCellValue(count);
                    count++;
                    dataRow.createCell((short) 1).setCellValue(pd1.getString("sendman"));
                    dataRow.createCell((short) 2).setCellValue(pd1.getString("tempname"));
                    dataRow.createCell((short) 3).setCellValue(pd1.getString("phone"));
                    dataRow.createCell((short) 4).setCellValue(pd1.getString("acceptman"));
                    dataRow.createCell((short) 5).setCellValue(pd1.getString("sendtime"));
                    dataRow.createCell((short) 6).setCellValue(pd1.getString("way"));
                    dataRow.createCell((short) 7).setCellValue(pd1.getString("content"));
//                        dataRow.createCell((short) 5).setCellValue(pd1.getString("clientname"));
//                        dataRow.createCell((short) 6).setCellValue(pd1.getString("clientcate"));
                }

            }
            // 设置下载时客户端Excel的名称
            String filename = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()) + "-Messagelog.xls";
            //设置下载的文件
            System.out.println(filename);
            response.setCharacterEncoding("UTF-8");
            response.setContentType("application/vnd.ms-excel");
            response.setHeader("Content-disposition", "attachment;filename=" + filename);
            OutputStream ouputStream = response.getOutputStream();//打开流
            wb.write(ouputStream); //在excel内写入流
            ouputStream.flush();// 刷新流
            ouputStream.close();// 关闭流

        } else {
            json.put("success", "false");
            json.put("msg", "登录超时，请重新登录");
        }



//        } catch (Exception e) {
//            json.put("success", "false");
//        }

    }

    //导出培训信息
    @RequestMapping(value = "/exportTrainExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportTrainExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String name = request.getParameter("name");
                System.out.println(name);
                String keywords = request.getParameter("keywords");
                System.out.println(keywords);
                name = name == null ? "" : urlDecoder.decode(name, "utf-8");
                keywords = keywords == null ? "" : urlDecoder.decode(keywords, "utf-8");
                pd.put("name",name);
                pd.put("keywords",keywords);
                page.setCurrentPage(1);
                page.setShowCount(99999999);
                page.setPd(pd);
                System.out.println(pd);
                List<PageData> clist = trainInfoService.findAlllistPage(page);
                HSSFWorkbook wb = new HSSFWorkbook();
                HSSFSheet sheet = wb.createSheet("培训信息表");
                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("序号");
                titleRow.createCell((short) 1).setCellValue("培训机构");
                titleRow.createCell((short) 2).setCellValue("办学班类型");
                titleRow.createCell((short) 3).setCellValue("地址");
                titleRow.createCell((short) 4).setCellValue("负责人");
                titleRow.createCell((short) 5).setCellValue("联系方式1");
                titleRow.createCell((short) 6).setCellValue("联系方式2");
                titleRow.createCell((short) 7).setCellValue("备注");
                System.out.println(clist);
                if (clist.size() > 0) {
                    int count = 1;
                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(count);
                        count++;
                        dataRow.createCell((short) 1).setCellValue(pd1.getString("name"));
                        dataRow.createCell((short) 2).setCellValue(pd1.getString("stat"));
                        dataRow.createCell((short) 3).setCellValue(pd1.getString("addr"));
                        dataRow.createCell((short) 4).setCellValue(pd1.getString("principal"));
                        dataRow.createCell((short) 5).setCellValue(pd1.getString("tel"));
                        dataRow.createCell((short) 6).setCellValue(pd1.getString("tel2"));
                        dataRow.createCell((short) 7).setCellValue(pd1.getString("remark"));
                    }

                }
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-trainInfo.xls";
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();
                wb.write(ouputStream);
                ouputStream.flush();
                ouputStream.close();
                json.put("success", "true");
                json.put("msg", "导出成功");
            } else {
                json.put("success", "false");
                json.put("msg", "超时，请重新登陆");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }


    @RequestMapping(value = "/exportOtherPersonExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportOtherPersonExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String startTime = request.getParameter("startTime");
                String endTime = request.getParameter("endTime");
                if(endTime != null && !"".equals(endTime)) {
                    endTime = TimeHandle.endTimeHeandle(endTime);
                    json.put("endTime", endTime);
                }
                String isjob = request.getParameter("isjob");
                startTime = startTime == null ? "" : urlDecoder.decode(startTime, "utf-8");
                endTime = endTime == null ? "" : urlDecoder.decode(endTime, "utf-8");
                isjob = isjob == null ? "" : urlDecoder.decode(isjob, "utf-8");

                page.setShowCount(99999999);
                page.setCurrentPage(1);
                pd.put("startTime",startTime);
                pd.put("endTime",endTime);
                pd.put("isjob",isjob);
                page.setPd(pd);
                System.out.println(pd);
                List<PageData> clist = otherPersonService.findAlllistPage(page);
                HSSFWorkbook wb = new HSSFWorkbook();
                HSSFSheet sheet = wb.createSheet("其他人员信息表");
                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("序号");
                titleRow.createCell((short) 1).setCellValue("姓名");
                titleRow.createCell((short) 2).setCellValue("性别");
                titleRow.createCell((short) 3).setCellValue("身份证号");
                titleRow.createCell((short) 4).setCellValue("就业状态");
                titleRow.createCell((short) 5).setCellValue("联系电话");
                System.out.println(clist);
                if (clist.size() > 0) {


                    int count = 1;
                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(count);
                        count++;
                        dataRow.createCell((short) 1).setCellValue(pd1.getString("name"));
                        String sex = pd1.getString("sex");
                        if("1".equals(sex))
                            dataRow.createCell((short) 2).setCellValue("男".toString());
                        if("2".equals(sex))
                            dataRow.createCell((short) 2).setCellValue("女".toString());
                        if("".equals(sex)|| sex == null)
                            dataRow.createCell((short) 2).setCellValue("");

                        dataRow.createCell((short) 3).setCellValue(pd1.getString("cardid"));
                        isjob = pd1.getString("isjob");
                        if("0".equals(isjob))
                                dataRow.createCell((short) 4).setCellValue("失业");
                        if("1".equals(isjob))
                            dataRow.createCell((short) 4).setCellValue("就业");
                        if("2".equals(isjob))
                            dataRow.createCell((short) 4).setCellValue("无意向就业");
                        if("3".equals(isjob))
                            dataRow.createCell((short) 4).setCellValue("灵活就业");
                        if("4".equals(isjob))
                            dataRow.createCell((short) 4).setCellValue("自主创业");

                        dataRow.createCell((short) 5).setCellValue(pd1.getString("tel"));
                    }

                }
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-other.xls";
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//???
                wb.write(ouputStream); //?excel????
                ouputStream.flush();// ???
                ouputStream.close();// ???
                json.put("success", "true");
                json.put("msg", "导入成功");
            } else {
                json.put("success", "false");
                json.put("msg", "超时，请重新登陆");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    //政策咨询导出
    @RequestMapping(value = "/exportPolicyExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportPolicyExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                //clazz区分汇总还是详情，detail为详情，summary为汇总
                String clazz = request.getParameter("clazz");
                if (null == clazz || "".equals(clazz)){
                    json.put("success", "false");
                    json.put("msg", "ClazzIsNull");
                    return json.toString();

                }else if(!"detail".equals(clazz) && !"summary".equals(clazz)){
                    json.put("success", "false");
                    json.put("msg", "ClazzIsError,MustIsDetailOrSummary");
                    return json.toString();
                }
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String startTime = request.getParameter("startTime");
                String endTime = request.getParameter("endTime");
                if(endTime != null && !"".equals(endTime)) {
                    endTime = TimeHandle.endTimeHeandle(endTime);
                    json.put("endTime", endTime);
                }
                String zczxname = request.getParameter("zczxname");
                String isjd = request.getParameter("isjd");
                String name = request.getParameter("name");
                String zczxtype = request.getParameter("zczxtype");
                String type = request.getParameter("type");
                startTime = startTime == null ? "" : urlDecoder.decode(startTime, "utf-8");
                type = type == null ? "" : urlDecoder.decode(type, "utf-8");
                zczxtype = zczxtype == null ? "" : urlDecoder.decode(zczxtype, "utf-8");
                endTime = endTime == null ? "" : urlDecoder.decode(endTime, "utf-8");
                isjd = isjd == null ? "" : urlDecoder.decode(isjd, "utf-8");
                name = name == null ? "" : urlDecoder.decode(name, "utf-8");
                zczxname = zczxname == null ? "" : urlDecoder.decode(zczxname, "utf-8");
                page.setShowCount(99999999);
                page.setCurrentPage(1);
                pd.put("startTime",startTime);
                pd.put("endTime",endTime);
                pd.put("isjd",isjd);
                pd.put("zczxtype",zczxtype);
                pd.put("name",name);
                pd.put("type",type);
                pd.put("zczxname",zczxname);
                page.setPd(pd);
                System.out.println(pd);
                List<PageData> clist = null;
                boolean flag = false;
                if("detail".equals(clazz)) {
                    clist = policyService.findAlllistPage(page);
                    flag = true;
                }else{
                    clist = policyService.findSummarylistPage(page);
                }

                HSSFWorkbook wb = new HSSFWorkbook();

                HSSFSheet sheet = wb.createSheet("政策咨询记录");
                int i = 0;
                if(flag == false){
                    i = 1;
                }
                HSSFRow titleRow_1 = sheet.createRow((short)0);
                Region region = new Region((short)0,(short)0,(short)1,(short)(7+i+i));
                sheet.addMergedRegion(region);
                HSSFCell cell = titleRow_1.createCell((short) 0);
                cell.setCellValue("漳浦县24小时就业服务平台政策服务报表");
                HSSFCellStyle titleStyle = wb.createCellStyle();
                titleStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN); //下边框
                titleStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);//左边框
                titleStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);//上边框
                titleStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);//右边框
                titleStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
                HSSFFont titleFont = wb.createFont();
                titleFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);//粗体显示
                titleFont.setFontHeightInPoints((short) 20);
                titleStyle.setFont(titleFont);
                cell.setCellStyle(titleStyle);
                HSSFRow titleRow = sheet.createRow(2);
                titleRow.createCell((short) 0).setCellValue("序号");
                if(flag == false){
                    titleRow.createCell((short) 1).setCellValue("服务次数");
                }
                titleRow.createCell((short) (1+i)).setCellValue("咨询时间");
                titleRow.createCell((short) (2+i)).setCellValue("政策名称");
                titleRow.createCell((short) (3+i)).setCellValue("服务类别");
                titleRow.createCell((short) (4+i)).setCellValue("咨询结果");
                titleRow.createCell((short) (5+i)).setCellValue("客户名称");
                titleRow.createCell((short) (6+i)).setCellValue("客户类型");
                titleRow.createCell((short) (7+i)).setCellValue("咨询内容");
                if(flag == false){
                    titleRow.createCell((short) (8+i)).setCellValue("政策推荐数量");
                }
                if (clist.size() > 0) {
                    int count = 1;
                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(count);
                        count++;
                        if(flag == false){
                            dataRow.createCell((short) 1).setCellValue(String.valueOf(pd1.get("zczxCount")));
                        }
                        dataRow.createCell((short) (1+i)).setCellValue(df.format(df.parse(pd1.getString("czdate"))));
                        //分解政策名称并且编号
                        dataRow.createCell((short) (2+i)).setCellValue(countHandle(pd1, flag, "zczxname"));
                        //分解政策类型并且编号
                        dataRow.createCell((short) (3+i)).setCellValue(countHandle(pd1, flag, "zczxtypename"));
                        isjd = pd1.getString("isjd");
                        if("0".equals(isjd))
                            dataRow.createCell((short) (4+i)).setCellValue("未解答");
                        if("1".equals(isjd))
                            dataRow.createCell((short) (4+i)).setCellValue("已解答");
                        if("".equals(isjd)|| isjd == null)
                            dataRow.createCell((short) (4+i)).setCellValue("");
                        dataRow.createCell((short) (5+i)).setCellValue(pd1.getString("name"));

                        type = pd1.getString("type");
                        if("1".equals(type))
                            dataRow.createCell((short) (6+i)).setCellValue("企业".toString());
                        if("2".equals(type))
                            dataRow.createCell((short) (6+i)).setCellValue("个人".toString());
                        if("".equals(type)|| type == null)
                            dataRow.createCell((short) (6+i)).setCellValue("");
                            dataRow.createCell((short) (7+i)).setCellValue(pd1.getString("fwcont"));
                            if(flag == false)
                                dataRow.createCell((short) (8+i)).setCellValue(String.valueOf(pd1.get("zctjCount")));



                    }

                }
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-policy.xls";
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();
                wb.write(ouputStream);
                ouputStream.flush();
                ouputStream.close();
                json.put("success", "true");
                json.put("msg", "导出成功");
            } else {
                json.put("success", "false");
                json.put("msg", "超时，请重新登陆");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }


    @RequestMapping(value = "/exportSignupExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportSignupExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String startTime = request.getParameter("startTime");
                String endTime = request.getParameter("endTime");
                if(endTime != null && !"".equals(endTime)) {
                    endTime = TimeHandle.endTimeHeandle(endTime);
                    json.put("endTime", endTime);
                }
                String isjob = request.getParameter("isjob");
                String name = request.getParameter("name");
                startTime = startTime == null ? "" : urlDecoder.decode(startTime, "utf-8");
                endTime = endTime == null ? "" : urlDecoder.decode(endTime, "utf-8");
                isjob = isjob == null ? "" : urlDecoder.decode(isjob, "utf-8");
                name = name == null ? "" : urlDecoder.decode(name, "utf-8");
                pd.put("startTime",startTime);
                pd.put("endTime",endTime);
                pd.put("isjod",isjob);
                pd.put("name",name);
                page.setCurrentPage(1);
                page.setShowCount(99999999);
                page.setPd(pd);
                System.out.println(pd);
                List<PageData> clist = signupService.findAlllistPage(page);
                //??excel??
                HSSFWorkbook wb = new HSSFWorkbook();
                //??sheet?
                HSSFSheet sheet = wb.createSheet("线上报名就业结果汇总表");
                //?????
                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("序号");
                titleRow.createCell((short) 1).setCellValue("报名时间");
                titleRow.createCell((short) 2).setCellValue("姓名");
                titleRow.createCell((short) 3).setCellValue("性别");
                titleRow.createCell((short) 4).setCellValue("联系电话");
                titleRow.createCell((short) 5).setCellValue("学历");
                titleRow.createCell((short) 6).setCellValue("报名企业");
                titleRow.createCell((short) 7).setCellValue("报名岗位");
                titleRow.createCell((short) 8).setCellValue("入职情况");
                titleRow.createCell((short) 9).setCellValue("备注");
                titleRow.createCell((short) 10).setCellValue("回访人员");
                titleRow.createCell((short) 11).setCellValue("回访时间");
                System.out.println(clist);
                if (clist.size() > 0) {


                    int count = 1;
                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(count);
                        count++;
                        if(pd1.get("czdate") != null)
                            dataRow.createCell((short) 1).setCellValue(df.format(df.parse(pd1.getString("czdate"))));
                        dataRow.createCell((short) 2).setCellValue(pd1.getString("pname"));
                        String sex = pd1.getString("sex");
                        if("1".equals(sex)) {
                            dataRow.createCell((short) 3).setCellValue("男");
                        }
                        if("2".equals(sex)){
                            dataRow.createCell((short) 3).setCellValue("女");
                        }
                        dataRow.createCell((short) 4).setCellValue(pd1.getString("tel"));
                        dataRow.createCell((short) 5).setCellValue(pd1.getString("xlname"));
                        dataRow.createCell((short) 6).setCellValue(pd1.getString("cname"));
                        dataRow.createCell((short) 7).setCellValue(pd1.getString("signupjob"));
                        isjob = pd1.getString("isjob");
                        if("0".equals(isjob))
                            dataRow.createCell((short) 8).setCellValue("失业");
                        if("1".equals(isjob))
                            dataRow.createCell((short) 8).setCellValue("就业");
                        if("2".equals(isjob))
                            dataRow.createCell((short) 8).setCellValue("无意向就业");
                        if("3".equals(isjob))
                            dataRow.createCell((short) 8).setCellValue("灵活就业");
                        if("4".equals(isjob))
                            dataRow.createCell((short) 8).setCellValue("自主创业");



                        dataRow.createCell((short) 9).setCellValue(pd1.getString("remark"));
                        dataRow.createCell((short) 10).setCellValue(pd1.getString("rczman"));
                        dataRow.createCell((short) 11).setCellValue(df.format(df.parse(pd1.getString("rcztime"))));

                    }

                }
                // ????????Excel???
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-signup.xls";
                //???????
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//???
                wb.write(ouputStream); //?excel????
                ouputStream.flush();// ???
                ouputStream.close();// ???
                json.put("success", "true");
                json.put("msg", "导出成功");
            } else {
                json.put("success", "false");
                json.put("msg", "超时，请重新登陆");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    //业务引导导出
    @RequestMapping(value = "/exportGuideExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportGuideExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                //clazz区分汇总还是详情，detail为详情，summary为汇总
                String clazz = request.getParameter("clazz");
                if (null == clazz || "".equals(clazz)){
                    json.put("success", "false");
                    json.put("msg", "ClazzIsNull");
                    return json.toString();
                }else if(!"detail".equals(clazz) && !"summary".equals(clazz)){
                    json.put("success", "false");
                    json.put("msg", "ClazzIsError,MustIsDetailOrSummary");
                    return json.toString();
                }
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String startTime = request.getParameter("startTime");
                String endTime = request.getParameter("endTime");
                System.out.println(endTime);
                if(endTime != null && !"".equals(endTime)) {
                    endTime = TimeHandle.endTimeHeandle(endTime);
                    json.put("endTime", endTime);
                }
                String isjob = request.getParameter("isjob");
                String name = request.getParameter("name");
                String ywname = request.getParameter("ywname");
                String ydqd = request.getParameter("ydqd");
                String isjd = request.getParameter("isjd");
                String type = request.getParameter("type");
                String uid = request.getParameter("uid");
                startTime = startTime == null ? "" : urlDecoder.decode(startTime, "utf-8");
                endTime = endTime == null ? "" : urlDecoder.decode(endTime, "utf-8");
                isjob = isjob == null ? "" : urlDecoder.decode(isjob, "utf-8");
                name = name == null ? "" : urlDecoder.decode(name, "utf-8");
                ywname = ywname == null ? "" : urlDecoder.decode(ywname, "utf-8");
                ydqd = ydqd == null ? "" : urlDecoder.decode(ydqd, "utf-8");
                isjd = isjd == null ? "" : urlDecoder.decode(isjd, "utf-8");
                type = type == null ? "" : urlDecoder.decode(type, "utf-8");
                uid = uid == null ? "" : urlDecoder.decode(uid, "utf-8");
                pd.put("startTime",startTime);
                pd.put("endTime",endTime);
                pd.put("isjd",isjob);
                pd.put("name",name);
                pd.put("ywname",ywname);
                pd.put("ydqd",ydqd);
                pd.put("isjd",isjd);
                pd.put("type",type);
                pd.put("uid",uid);
                page.setShowCount(99999999);
                page.setCurrentPage(1);
                page.setPd(pd);
                List<PageData> clist = null;
                boolean flag = false;
                if("detail".equals(clazz)) {
                    clist = guideService.findAlllistPage(page);
                    flag = true;
                }else{
                    clist = guideService.findSummarylistPage(page);
                }
                int i = 0;
                if(flag == false)
                    i = 1;
                HSSFWorkbook wb = new HSSFWorkbook();
                HSSFSheet sheet = wb.createSheet("业务咨询解答表");
                HSSFRow titleRow_1 = sheet.createRow((short)0);
                Region region = new Region((short)0,(short)0,(short)1,(short)(7+i));
                sheet.addMergedRegion(region);
                HSSFCell cell = titleRow_1.createCell((short) 0);
                cell.setCellValue("漳浦县24小时就业服务平台业务引导服务报表");
                HSSFCellStyle titleStyle = wb.createCellStyle();
                titleStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN); //下边框
                titleStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);//左边框
                titleStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);//上边框
                titleStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);//右边框
                titleStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
                HSSFFont titleFont = wb.createFont();
                titleFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);//粗体显示
                if(flag == false) {
                    titleFont.setFontHeightInPoints((short) 20);
                }else{
                    titleFont.setFontHeightInPoints((short) 16);
                }
                titleStyle.setFont(titleFont);
                cell.setCellStyle(titleStyle);
                HSSFRow titleRow = sheet.createRow(2);
                titleRow.createCell((short) 0).setCellValue("序号");
                if(flag == false) {
                    titleRow.createCell((short) 1).setCellValue("服务次数");
                }
                titleRow.createCell((short) (1+i)).setCellValue("咨询时间");
                titleRow.createCell((short) (2+i)).setCellValue("客户类型");
                titleRow.createCell((short) (3+i)).setCellValue("客户名称");
                titleRow.createCell((short) (4+i)).setCellValue("业务名称");
                titleRow.createCell((short) (5+i)).setCellValue("引导渠道");
                titleRow.createCell((short) (6+i)).setCellValue("咨询结果");
                titleRow.createCell((short) (7+i)).setCellValue("服务内容");
                if (clist.size() > 0) {
                    int count = 1;
                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(count);
                        count++;
                        if(flag == false){
                            dataRow.createCell((short) 1).setCellValue(String.valueOf(pd1.get("fwCount")));
                        }
                        if(pd1.get("czdate") !=null)
                            dataRow.createCell((short) (1+i)).setCellValue(df.format(df.parse(pd1.getString("czdate"))));
                        type = pd1.getString("type");
                        if("1".equals(type))
                            dataRow.createCell((short) (2+i)).setCellValue("企业");
                        if("2".equals(type))
                            dataRow.createCell((short) (2+i)).setCellValue("个人");
                        dataRow.createCell((short) (3+i)).setCellValue(pd1.getString("name"));
                        dataRow.createCell((short) (4+i)).setCellValue(countHandle(pd1,flag,"ywname"));
                        dataRow.createCell((short) (5+i)).setCellValue(countHandle(pd1,flag,"ydqdname"));
                        isjd = pd1.getString("isjd");
                        if("1".equals(isjd))
                            dataRow.createCell((short) (6+i)).setCellValue("已解答");
                        if("0".equals(isjd))
                            dataRow.createCell((short) (6+i)).setCellValue("未解答");
                        dataRow.createCell((short) (7+i)).setCellValue(pd1.getString("fwcont"));

                    }

                }

                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-Guide.xls";
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//???
                wb.write(ouputStream); //?excel????
                ouputStream.flush();// ???
                ouputStream.close();// ???
                json.put("success", "true");
                json.put("msg", "导出成功");
            } else {
                json.put("success", "false");
                json.put("msg", "超时，请重新登陆");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    //培训机构信息导入
    @RequestMapping(value = "/readTrainExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readTrainExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            System.out.println(request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                System.out.println(file);
                if (null != file && !file.isEmpty()) {
                    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;                                //??????
                    String fileName = FileUpload.fileUp(file, filePath, "Excel");                            //????
                    List<PageData> listPd = (List) ObjectExcelRead2.readExcel(filePath, fileName, 1, 0, 0);        //???EXCEL??,???????List 2:??3????0:??A????0:?0?sheet
                    /*???????======================================*/
                    for(int i = 0;i < listPd.size(); i++){
                        String var1 = listPd.get(i).getString("var1");
                        String var2 = listPd.get(i).getString("var2");
                        String var3 = listPd.get(i).getString("var3");
                        String var4 = listPd.get(i).getString("var4");
                        String var5 = listPd.get(i).getString("var5");
                        if(     var1 == null || "".equals(var1) ||
                                var2 == null || "".equals(var2) ||
                                var3 == null || "".equals(var3) ||
                                var4 == null || "".equals(var4) ||
                                var5 == null || "".equals(var5) ) {
                            json.put("msg","有无效数据");
                            json.put("success","false");
                            break;
                        }
                    }
                    List<PageData> saveList = new ArrayList<PageData>();
                    for (int i = 0; i < listPd.size(); i++) {
                        PageData savePd = new PageData();
                        String var1 = listPd.get(i).getString("var1");
                        String var2 = listPd.get(i).getString("var2");
                        String var3 = listPd.get(i).getString("var3");
                        String var4 = listPd.get(i).getString("var4");
                        String var5 = listPd.get(i).getString("var5");
                        String var6 = listPd.get(i).getString("var6");
                        String var7 = listPd.get(i).getString("var7");
                        savePd.put("name", var1);
                        savePd.put("addr", var2);
                        savePd.put("stat", var3);
                        savePd.put("principal", var4);
                        savePd.put("tel", var5);
                        savePd.put("tel2", var6);
                        savePd.put("remark", var7);
                        savePd.put("czman",pd_token.get("ZXYH"));
                        List<PageData> exit = trainInfoService.findExit(savePd);
                        if(exit.size() < 1)
                            saveList.add(savePd);
                    }
                    if(saveList != null && saveList.size() >= 1){
                    List<List<PageData>> split = ListUtil.split(saveList, 2000);
                    for (List<PageData> pageData : split) {
                        if(pageData != null && pageData.size() >= 1) {
                            trainInfoService.save(pageData);
                        }
                    }}

                    json.put("success", "true");
                }

            } else {
                json.put("success", "false");
                json.put("msg", "导入失败");
            }
        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    @RequestMapping(value = "/exportEmPersonExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportEmPersonExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String startTime = request.getParameter("startTime");
                String endTime = request.getParameter("endTime");
                if(endTime != null && !"".equals(endTime)) {
                    endTime = TimeHandle.endTimeHeandle(endTime);
                    json.put("endTime", endTime);
                }
                String isjob = request.getParameter("isjob");
                String name = request.getParameter("name");
                String pageIndex = "0";
                String pageSize = "999999999";
                startTime = startTime == null ? "" : urlDecoder.decode(startTime, "utf-8");
                endTime = endTime == null ? "" : urlDecoder.decode(endTime, "utf-8");
                isjob = isjob == null ? "" : urlDecoder.decode(isjob, "utf-8");
                name = name == null ? "" : urlDecoder.decode(name, "utf-8");
                String pageIndex1 = pageIndex == null ? "" : urlDecoder.decode(pageIndex, "utf-8");
                String pageSize1 = pageSize == null ? "" : urlDecoder.decode(pageSize, "utf-8");
                pd.put("pageIndex", pageIndex1);
                pd.put("pageSize", pageSize1);
                pd.put("startTime",startTime);
                pd.put("endTime",endTime);
                pd.put("isjd",isjob);
                pd.put("name",name);
                page.setShowCount(999999999);
                page.setCurrentPage(1);
                page.setPd(pd);
                System.out.println(pd);
                List<PageData> clist = emPersonService.findAlllistPage(page);
                for (PageData pageData : clist) {
                    System.out.println(pageData);
                }
                HSSFWorkbook wb = new HSSFWorkbook();
                HSSFSheet sheet = wb.createSheet("就业人员信息汇总表");
                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("序号");
                titleRow.createCell((short) 1).setCellValue("求职时间");
                titleRow.createCell((short) 2).setCellValue("姓名");
                titleRow.createCell((short) 3).setCellValue("性别");
                titleRow.createCell((short) 4).setCellValue("联系电话");
                titleRow.createCell((short) 5).setCellValue("学历");
                titleRow.createCell((short) 6).setCellValue("岗位性质");
                titleRow.createCell((short) 7).setCellValue("岗位名称");
                titleRow.createCell((short) 8).setCellValue("推荐企业数量");
                titleRow.createCell((short) 9).setCellValue("就职单位名称");
                titleRow.createCell((short) 10).setCellValue("回访结果");
                titleRow.createCell((short) 11).setCellValue("更新时间");
                System.out.println(clist);
                if (clist.size() > 0) {


                    int count = 1;
                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(count);
                        count++;
                        if(pd1.get("qzdate") !=null)
                            dataRow.createCell((short) 1).setCellValue(df.format(df.parse(pd1.getString("qzdate"))));
                        dataRow.createCell((short) 2).setCellValue(pd1.getString("name"));
                        String sex = pd1.getString("sex");
                        if("1".equals(sex)) {
                            dataRow.createCell((short) 3).setCellValue("男");
                        }
                        if("2".equals(sex)){
                            dataRow.createCell((short) 3).setCellValue("女");
                        }
                        dataRow.createCell((short) 4).setCellValue(pd1.getString("tel"));
                        dataRow.createCell((short) 5).setCellValue(pd1.getString("xlname"));
                        dataRow.createCell((short) 6).setCellValue(pd1.getString("jobtypename"));
                        dataRow.createCell((short) 7).setCellValue(pd1.getString("jobname"));
                        Object tjcount = pd1.get("tjcount");
                        Integer tjcountint = Integer.valueOf(tjcount.toString());
                        dataRow.createCell((short) 8).setCellValue(tjcountint.toString());
                        dataRow.createCell((short) 9).setCellValue(pd1.getString("jobunit"));
                        String result = pd1.getString("result");
                        if("0".equals(result))
                            dataRow.createCell((short) 10).setCellValue("未回访");
                        if("1".equals(result))
                            dataRow.createCell((short) 10).setCellValue("已回访");
                        if( pd1.get("cztime") !=null)
                            dataRow.createCell((short) 11).setCellValue(df.format(df.parse(pd1.getString("cztime"))));

                    }

                }
                // ????????Excel???
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-EmPeople.xls";
                //???????
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//???
                wb.write(ouputStream); //?excel????
                ouputStream.flush();// ???
                ouputStream.close();// ???
                json.put("success", "true");
                json.put("msg", "导出成功");
            } else {
                json.put("success", "false");
                json.put("msg", "超时，请重新登陆");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }


    //线上就业回访导出
    @RequestMapping(value = "/exportsignExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportsignExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                PageData pd = new PageData();

                System.out.println(pd);
                List<PageData> clist = trainrecoService.exportsign(pd);
                System.out.println(clist);
                //创建excel文件
                HSSFWorkbook wb = new HSSFWorkbook();
                //创建sheet页
                HSSFSheet sheet = wb.createSheet("线上报名回访");
                //创建标题行
                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("提交时间");
                titleRow.createCell((short) 1).setCellValue("姓名");
                titleRow.createCell((short) 2).setCellValue("性别");
                titleRow.createCell((short) 3).setCellValue("联系电话");
                titleRow.createCell((short) 4).setCellValue("学历");
                titleRow.createCell((short) 5).setCellValue("报名企业");
                titleRow.createCell((short) 6).setCellValue("报名岗位(汇总)");
                titleRow.createCell((short) 7).setCellValue("招聘工种");
                titleRow.createCell((short) 8).setCellValue("企业联系人");
                titleRow.createCell((short) 9).setCellValue("企业备用联系人");
                titleRow.createCell((short) 10).setCellValue("联系电话1");
                titleRow.createCell((short) 11).setCellValue("联系电话2");
                if (clist.size() > 0) {

                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(pd1.get("czdate").toString());
                        dataRow.createCell((short) 1).setCellValue(pd1.getString("pname"));
                        String sex = pd1.getString("sex");
                        if("1".equals(sex)) {
                            sex="男";
                        }
                        if("2".equals(sex)){
                            sex="女";
                        }
                        dataRow.createCell((short) 2).setCellValue(sex);
                        dataRow.createCell((short) 3).setCellValue(pd1.getString("plxtel"));
                        dataRow.createCell((short) 4).setCellValue(pd1.getString("xlname"));
                        dataRow.createCell((short) 5).setCellValue(pd1.getString("cname"));
                        dataRow.createCell((short) 6).setCellValue(pd1.getString("signupjob"));
                        dataRow.createCell((short) 7).setCellValue(pd1.getString("jobnamename"));
                        dataRow.createCell((short) 8).setCellValue(pd1.getString("clxr"));
                        dataRow.createCell((short) 9).setCellValue(pd1.getString("cbylxr"));
                        dataRow.createCell((short) 10).setCellValue(pd1.getString("clxtel"));
                        dataRow.createCell((short) 11).setCellValue(pd1.getString("cbylxtel"));
                    }

                }
                // 设置下载时客户端Excel的名称
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-xsbmhf.xls";
                //设置下载的文件
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//打开流
                wb.write(ouputStream); //在excel内写入流
                ouputStream.flush();// 刷新流
                ouputStream.close();// 关闭流

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    //线上就业回访导人
    @RequestMapping(value = "/readsignExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readsignExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            System.out.println(request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            String zxyh = pd_stoken.getString("ZXYH");
            if (pd_token != null) {
                if (null != file && !file.isEmpty()) {
                    String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;                                //文件上传路径
                    String fileName = FileUpload.fileUp(file, filePath, "ComExcel");                            //执行上传
                    List<PageData> listPd = (List) ObjectExcelRead2.readExcel(filePath, fileName, 1, 0, 0);        //执行读EXCEL操作,读出的数据导入List 2:从第3行开始；0:从第A列开始；0:第0个sheet
                    /*检查字段操作======================================*/
                    boolean check = true;
                    String str = "";
                    for (int i = 0; i < listPd.size(); i++) {
                        String var1 = listPd.get(i).getString("var1");
                        String var3 = listPd.get(i).getString("var3");
                        String var5 = listPd.get(i).getString("var5");
                        String var7 = listPd.get(i).getString("var7");
                        String var8 = listPd.get(i).getString("var8");
                        String var10 = listPd.get(i).getString("var10");
                        if ("".equals(var1)) {
                            check = false;
                            str = str + "姓名不能为空;";
                            break;
                        } else if ("".equals(var3)) {
                            check = false;
                            //StringUtils.isnu
                            str = str + "联系电话不能为空;";
                            break;
                        }else if ("".equals(var5)) {
                            check = false;
                            str = str + "报名企业不能为空;";
                            break;
                        }else if ("".equals(var7)) {
                            check = false;
                            str = str + "招聘工种不能为空;";
                            break;
                        }else if ("".equals(var8)) {
                            check = false;
                            str = str + "企业联系人不能为空;";
                            break;
                        }else if ("".equals(var10)) {
                            check = false;
                            str = str + "联系电话不能为空;";
                            break;
                        }
                    }
                    System.out.println(listPd);
                    /*存入数据库操作======================================*/
                    if (check == true) {
                        for (int i = 0; i < listPd.size(); i++) {
                            PageData pd4 = new PageData();
                            String var1 = listPd.get(i).getString("var1").trim();
                            String tel = listPd.get(i).getString("var3") == null ? "" : listPd.get(i).getString("var3").replace("-", "");
                            pd4.put("tel", tel);
                            pd4.put("name", var1);
                            List<PageData> findperson = jobReferManager.findperson(pd4);
                            String puuid="";

                            if (findperson.isEmpty()){
                                PageData pageData = new PageData();
                                pageData.put("name",listPd.get(i).getString("var1"));
                                String var2 = listPd.get(i).getString("var2");
                                if ("男".equals(var2)){
                                    var2="1";
                                }else if ("女".equals(var2)){
                                    var2="2";
                                }
                                pageData.put("sex", var2);
                                pageData.put("tel", listPd.get(i).getString("var3"));
                                pageData.put("lxtel", listPd.get(i).getString("var3"));
                                String var4 = listPd.get(i).getString("var4").trim();
                                System.out.println(var4+"var4");
                                PageData pd1 = new PageData();
                                pd1.put("name",var4);
                                PageData dic1 = consumerManager.getDIC(pd1);
                                if (dic1!=null){
                                    pageData.put("xl", dic1.getString("DICTIONARIES_ID"));
                                }else {
//                                    str = str + "查无此学历;";
//                                    json.put("msg", str);
//                                    break;
                                    pageData.put("xl", "暂无");
                                }
                                puuid = getUUID32();
                                pageData.put("uid",puuid);
                                pageData.put("isimpot", "1");
                                pageData.put("czdate", getTime());
                                pageData.put("czman", zxyh);
                                pageData.put("cate", "4c3ef95ed0c5441db8b75db881ce5c80");
                                jobReferManager.insertperson(pageData);
                            }else {
                                for (PageData pageData : findperson) {
                                    puuid=pageData.getString("uid");
                                    System.out.println(pageData);
                                }
                            }


                            PageData pd3 = new PageData();
                            String var5 = listPd.get(i).getString("var5").trim();
                            String tel2 = listPd.get(i).getString("var10") == null ? "" : listPd.get(i).getString("var10").replace("-", "");
                            pd3.put("tel", tel2);
                            pd3.put("name", var5);
                            List<PageData> findcompany = consumerManager.findcompany(pd3);
                            String cuuid="";

                            if (findcompany.isEmpty()){
                                PageData pageData1 = new PageData();
                                pageData1.put("name",listPd.get(i).getString("var5"));
                                pageData1.put("lxr",listPd.get(i).getString("var8"));
                                pageData1.put("bylxr",listPd.get(i).getString("var9"));
                                String tel3 = listPd.get(i).getString("var10") == null ? "" : listPd.get(i).getString("var10").replace("-", "");
                                pageData1.put("tel",tel3);
                                pageData1.put("lxtel",tel3);
                                String bylxtel = listPd.get(i).getString("var11") == null ? "" : listPd.get(i).getString("var11").replace("-", "");
                                pageData1.put("bylxtel",bylxtel);
                                cuuid = getUUID32();
                                pageData1.put("uid",cuuid);
                                pageData1.put("isimpot", "1");
                                pageData1.put("czdate", getTime());
                                pageData1.put("czman", zxyh);
                                consumerManager.insertcompany(pageData1);
                            }else {
                                for (PageData data : findcompany) {
                                    cuuid = data.getString("uid");
                                    System.out.println(data);
                                }
                            }


                            PageData pageData2 = new PageData();
                            pageData2.put("czdate", listPd.get(i).getString("var0"));
                            pageData2.put("signupjob", listPd.get(i).getString("var6"));
                            String var7 = listPd.get(i).getString("var7").trim();
                            PageData pd2 = new PageData();
                            pd2.put("gwflname",var7);
                            PageData getjobtype = consumerManager.getjobtype(pd2);
                            if (getjobtype!=null){
                                pageData2.put("jobname",Integer.parseInt(getjobtype.get("code").toString()));
                            }else {
                                pageData2.put("jobname","暂无");
                            }
                            pageData2.put("puid", puuid);
                            pageData2.put("cuid", cuuid);
                            pageData2.put("isjob", "0");

                            pageData2.put("uid", getUUID32());

                            trainrecoService.insertsignup(pageData2);

                        }
                        json.put("success", "true");
                    } else if (check == false) {
                        json.put("msg", str);
                    }

                }

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }
        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }


    //回访信息导出
    @RequestMapping(value = "/exportrevrecordExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportrevrecordExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                PageData pd = new PageData();
                pd.put("cate", request.getParameter("cate"));
                pd.put("starttime", request.getParameter("starttime"));
                pd.put("endtime", request.getParameter("endtime"));
                pd.put("keywords", request.getParameter("keywords"));
                pd.put("isjt", request.getParameter("isjt"));
                System.out.println(pd);
                List<PageData> clist = revrecordManager.findrevrecord(pd);
                System.out.println(clist);
                //创建excel文件
                HSSFWorkbook wb = new HSSFWorkbook();
                //创建sheet页
                HSSFSheet sheet = wb.createSheet("回访信息");
                //创建标题行
                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("回访时间");
                titleRow.createCell((short) 1).setCellValue("联系电话");
                titleRow.createCell((short) 2).setCellValue("客户名称");
                titleRow.createCell((short) 3).setCellValue("客户类型");
                titleRow.createCell((short) 4).setCellValue("任务类型");
                titleRow.createCell((short) 5).setCellValue("回访结果");
                titleRow.createCell((short) 6).setCellValue("服务坐席");
                titleRow.createCell((short) 7).setCellValue("备注");
                if (clist.size() > 0) {

                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(pd1.getString("kssj"));
                        dataRow.createCell((short) 1).setCellValue(pd1.getString("zjhm"));
                        dataRow.createCell((short) 2).setCellValue(pd1.getString("name"));
                        dataRow.createCell((short) 3).setCellValue(pd1.getString("typename"));
                        String tasktype = StringUtils.isNotEmpty(pd1.getString("tasktype")) ? pd1.get("tasktype").toString() : "";
                        if (tasktype.equals("0")) {
                            tasktype="就业回访";
                        }else if (tasktype.equals("1")){
                            tasktype="线上报名";
                        }else if (tasktype.equals("2")){
                            tasktype="未接来电";
                        }else if (tasktype.equals("3")){
                            tasktype="留言";
                        }else {
                            tasktype="暂无";
                        }
                        System.out.println(tasktype);
                        dataRow.createCell((short) 4).setCellValue(tasktype);
                        String result = StringUtils.isNotEmpty(pd1.getString("result")) ? pd1.getString("result") : "";
                        if (result.equals("0")) {
                            result="未回访";
                        }else if (result.equals("1")){
                            result="已回访";
                        }else {
                            result="未回访";
                        }
                        dataRow.createCell((short) 5).setCellValue(result);
                        dataRow.createCell((short) 6).setCellValue(pd1.getString("zxxm"));
                        dataRow.createCell((short) 7).setCellValue(pd1.getString("remark"));
                    }

                }
                // 设置下载时客户端Excel的名称
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-xsbmhf.xls";
                //设置下载的文件
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();//打开流
                wb.write(ouputStream); //在excel内写入流
                ouputStream.flush();// 刷新流
                ouputStream.close();// 关闭流

            } else {
                json.put("success", "false");
                json.put("msg", "登录超时，请重新登录");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }

    //其他人员信息导入
    @RequestMapping(value = "/readOtherPersonExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String readOtherPersonExcel(@RequestParam(value = "files", required = false) MultipartFile file, HttpServletRequest request) throws Exception {
        PageData pd = new PageData();
        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            System.out.println(request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                System.out.println(file);
                if (null != file && !file.isEmpty()) {
                    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    String filePath = PathUtil.getClasspath() + Const.FILEPATHFILE;
                    String fileName = FileUpload.fileUp(file, filePath, "Excel");
                    List<PageData> listPd = (List) ObjectExcelRead2.readExcel(filePath, fileName, 1, 0, 0);        //???EXCEL??,???????List 2:??3????0:??A????0:?0?sheet
                    List<PageData> saveList = new ArrayList<PageData>()
;                    //关键字段判断
                    for (int i = 0; i < listPd.size(); i++) {
                        String var0 = listPd.get(i).getString("var0");
                        String var3 = listPd.get(i).getString("var3");
                        if (var0 == null || "".equals(var0) ||
                                    var3 == null || "".equals(var3)) {
                                json.put("mesg", "表格中有无效数据");
                                json.put("success", "false");
                                return json.toString();
                        }
                    }
                    for (int i = 0; i < listPd.size(); i++) {
                        PageData savePd = new PageData();
                        String var0 = listPd.get(i).getString("var0");
                        String var1 = listPd.get(i).getString("var1");
                        String var2 = listPd.get(i).getString("var2");
                        String var3 = listPd.get(i).getString("var3");
                        String var4 = listPd.get(i).getString("var4");
                        String var5 = listPd.get(i).getString("var5");
                        String var7 = listPd.get(i).getString("var7");
                        String var8 = listPd.get(i).getString("var8");
                        String var9 = listPd.get(i).getString("var9");
                        String var10 = listPd.get(i).getString("var10");
                        savePd.put("name", var0);
                        if(var1.equals("男")) {
                            savePd.put("sex", "1");
                        }
                        else if(var1.equals("女"))
                        {
                            savePd.put("sex","2");
                        }else{
                            savePd.put("sex",var1);
                        }
                        savePd.put("cardid", var2);
                        savePd.put("tel", var3);
                        savePd.put("lxtel", var3);
                        savePd.put("age", var4);
                        savePd.put("jg", var5);
                        if ("就业".equals(var7)){
                            savePd.put("isjob", "1");
                        }else if("失业".equals(var7)){
                            savePd.put("isjob", "0");
                        }else if("无意向就业".equals(var7)){
                            savePd.put("isjob", "2");
                        }else if("灵活就业".equals(var7)){
                            savePd.put("isjob", "3");
                        }else if("自主创业".equals(var7)){
                            savePd.put("isjob", "4");
                        }
                        savePd.put("email", var8);
                        savePd.put("xl", var9);
                        savePd.put("zy", var10);
                        Page Exit = new Page();
                        Exit.setPd(savePd);
                        List<PageData> exist = otherPersonService.findExist(Exit);
                        if(exist.size() < 1) {
                            saveList.add(savePd);
                        }
                        }
                    List<List<PageData>> lists = ListUtil.split(saveList, 2000);
                    if(lists != null && lists.size() >= 1)
                    for (List<PageData> list : lists) {
                        if(list.size()>= 1)
                        otherPersonService.save(list);
                    }
                }
                    json.put("success", "true");


            } else {
                json.put("success", "false");
                json.put("msg", "请重新登陆");
            }
        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }




    //其他服务导出
    @RequestMapping(value = "/exportOtherServiceExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportOtherServiceExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                String clazz = request.getParameter("clazz");
                if (null == clazz || "".equals(clazz)){
                    json.put("success", "false");
                    json.put("msg", "ClazzIsNull");
                    return json.toString();
                }else if(!"detail".equals(clazz) && !"summary".equals(clazz)){
                    json.put("success", "false");
                    json.put("msg", "ClazzIsError,MustIsDetailOrSummary");
                    return json.toString();
                }
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String startTime = request.getParameter("startTime");
                String endTime = request.getParameter("endTime");
                if(endTime != null && !"".equals(endTime)) {
                    endTime = TimeHandle.endTimeHeandle(endTime);
                    json.put("endTime", endTime);
                }
                String fwname = request.getParameter("fwname");
                String fwtype = request.getParameter("fwtype");
                String name = request.getParameter("name");
                String type = request.getParameter("type");
                String isjd = request.getParameter("isjd");
                startTime = startTime == null ? "" : urlDecoder.decode(startTime, "utf-8");
                type = type == null ? "" : urlDecoder.decode(type, "utf-8");
                endTime = endTime == null ? "" : urlDecoder.decode(endTime, "utf-8");
                name = name == null ? "" : urlDecoder.decode(name, "utf-8");
                fwname = fwname == null ? "" : urlDecoder.decode(fwname, "utf-8");
                fwtype = fwtype == null ? "" : urlDecoder.decode(fwtype, "utf-8");
                isjd = isjd == null ? "" : urlDecoder.decode(isjd, "utf-8");
                page.setShowCount(99999999);
                page.setCurrentPage(1);
                pd.put("startTime",startTime);
                pd.put("endTime",endTime);
                pd.put("fwtype",fwtype);
                pd.put("fwname",fwname);
                pd.put("name",name);
                pd.put("type",type);
                pd.put("isjd",isjd);
                page.setPd(pd);
                boolean flag = false;
                List<PageData> clist = null;
                if("detail".equals(clazz)) {
                    clist = otherServiceService.findAlllistPage(page);
                    flag = true;
                }else{
                    clist = otherServiceService.findSummarylistPage(page);
                }
                int i = 0;
                if(flag == false)
                    i = 1;
                HSSFWorkbook wb = new HSSFWorkbook();

                HSSFSheet sheet = wb.createSheet("其他服务记录");
                HSSFRow titleRow_1 = sheet.createRow((short)0);
                Region region = new Region((short)0,(short)0,(short)1,(short)(7+i));
                sheet.addMergedRegion(region);
                HSSFCell cell = titleRow_1.createCell((short) 0);
                cell.setCellValue("漳浦县24小时就业服务平台其他服务报表");
                HSSFCellStyle titleStyle = wb.createCellStyle();
                titleStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN); //下边框
                titleStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);//左边框
                titleStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);//上边框
                titleStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);//右边框
                titleStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
                HSSFFont titleFont = wb.createFont();
                titleFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);//粗体显示
                if(flag == false) {
                    titleFont.setFontHeightInPoints((short) 20);
                }else{
                    titleFont.setFontHeightInPoints((short) 16);
                }
                titleStyle.setFont(titleFont);
                cell.setCellStyle(titleStyle);
                HSSFRow titleRow = sheet.createRow(2);
                titleRow.createCell((short) 0).setCellValue("序号");
                if(flag == false){
                titleRow.createCell((short) 1).setCellValue("服务次数");

                }
                titleRow.createCell((short) (1+i)).setCellValue("咨询时间");
                titleRow.createCell((short) (2+i)).setCellValue("客户名称");
                titleRow.createCell((short) (3+i)).setCellValue("客户类型");
                titleRow.createCell((short) (4+i)).setCellValue("服务标题");
                titleRow.createCell((short) (5+i)).setCellValue("咨询类别");
                titleRow.createCell((short) (6+i)).setCellValue("服务记录");
                titleRow.createCell((short) (7+i)).setCellValue("咨询结果");
                System.out.println(clist);
                if (clist.size() > 0) {
                    int count = 1;
                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(count++);
                        if(flag == false){
                        dataRow.createCell((short) 1).setCellValue(String.valueOf(pd1.get("serverCount")));
                        }
                        dataRow.createCell((short) (1+i)).setCellValue(df.format(df.parse(pd1.getString("czdate"))));
                        dataRow.createCell((short) (2+i)).setCellValue(pd1.getString("name"));
                        type = pd1.getString("type");
                        if("1".equals(type))
                            dataRow.createCell((short) (3+i)).setCellValue("企业");
                        if("2".equals(type))
                            dataRow.createCell((short) (3+i)).setCellValue("个人");
                        dataRow.createCell((short) (4+i)).setCellValue(countHandle(pd1,flag,"fwname"));
                        dataRow.createCell((short) (5+i)).setCellValue(countHandle(pd1,flag,"fwtypename"));
                        dataRow.createCell((short) (6+i)).setCellValue(pd1.getString("remark"));
                        isjd = pd1.getString("isjd");
                        if("0".equals(isjd))
                        dataRow.createCell((short) (7+i)).setCellValue("未解答");
                        if("1".equals(isjd))
                        dataRow.createCell((short) (7+i)).setCellValue("已解答");
                    }

                }
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-otherService.xls";
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();
                wb.write(ouputStream);
                ouputStream.flush();
                ouputStream.close();
                json.put("success", "true");
                json.put("msg", "导出成功");
            } else {
                json.put("success", "false");
                json.put("msg", "超时，请重新登陆");
            }

        } catch (Exception e) {
            json.put("success", "false");
        }
        return json.toString();
    }


    //技能培训导出
    @RequestMapping(value = "/exporttrainrecoExcel", produces = {"application/json;charset=UTF-8"})
    @CrossOrigin(allowedHeaders = "*", allowCredentials = "true")
    @ResponseBody()
    public String exportTrainRecoExcel(HttpServletResponse response, HttpServletRequest request) throws Exception {

        JSONObject json = new JSONObject();
//        try {
            PageData pd_stoken = new PageData();
            pd_stoken.put("TOKENID", request.getParameter("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                PageData pd = new PageData();
                Page page = new Page();
                URLDecoder urlDecoder = new URLDecoder();
                String starttime = request.getParameter("starttime");
                String endtime = request.getParameter("endtime");
                if(endtime != null && !"".equals(endtime)) {
                    endtime = TimeHandle.endTimeHeandle(endtime);
                    json.put("endtime", endtime);
                }
                String issue = request.getParameter("issue");
                String keywords = request.getParameter("keywords");

                starttime = starttime == null ? "" : urlDecoder.decode(starttime, "utf-8");
                endtime = endtime == null ? "" : urlDecoder.decode(endtime, "utf-8");
                issue = issue == null ? "" : urlDecoder.decode(issue, "utf-8");
                keywords = keywords == null ? "" : urlDecoder.decode(keywords, "utf-8");

                page.setShowCount(99999999);
                page.setCurrentPage(1);
                pd.put("starttime",starttime);
                pd.put("endtime",endtime);
                pd.put("issue",issue);
                pd.put("keywords",keywords);
                page.setPd(pd);
                System.out.println(pd);
                List<PageData> clist = trainrecoService.findTrainrecolistPage(page);

                HSSFWorkbook wb = new HSSFWorkbook();

                HSSFSheet sheet = wb.createSheet("技能培训");

                HSSFRow titleRow = sheet.createRow(0);
                titleRow.createCell((short) 0).setCellValue("序号");
                titleRow.createCell((short) 1).setCellValue("通话时间");
                titleRow.createCell((short) 2).setCellValue("人员类型");
                titleRow.createCell((short) 3).setCellValue("客户名称");
                titleRow.createCell((short) 4).setCellValue("联系电话");
                titleRow.createCell((short) 5).setCellValue("工种");
                titleRow.createCell((short) 6).setCellValue("证书等级");
                titleRow.createCell((short) 7).setCellValue("领证状态");
                titleRow.createCell((short) 8).setCellValue("推荐机构");
                titleRow.createCell((short) 9).setCellValue("推荐政策");
                titleRow.createCell((short) 10).setCellValue("备注");
                System.out.println(clist);
                if (clist.size() > 0) {


                    int count = 1;
                    for (PageData pd1 : clist) {
                        HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
                        dataRow.createCell((short) 0).setCellValue(count++);
                        String cztime = StringUtils.isNotEmpty(pd1.getString("cztime")) ? df.format(df.parse(pd1.getString("cztime"))) : "";
                        dataRow.createCell((short) 1).setCellValue(cztime);
                        dataRow.createCell((short) 2).setCellValue(pd1.getString("catename"));
                        dataRow.createCell((short) 3).setCellValue(pd1.getString("name"));
                        dataRow.createCell((short) 4).setCellValue(pd1.getString("lxtel"));
                        dataRow.createCell((short) 5).setCellValue(pd1.getString("jobvarname"));
                        dataRow.createCell((short) 6).setCellValue(pd1.getString("credenname")+pd1.getString("levelname"));
                        issue = pd1.getString("issue");
                        if("0".equals(issue))
                            dataRow.createCell((short) 7).setCellValue("未领证");
                        if("1".equals(issue))
                            dataRow.createCell((short) 7).setCellValue("已领证");

                        dataRow.createCell((short) 8).setCellValue(pd1.getString("trainname"));
                        List<PageData> TrainZClist = trainrecoService.TrainZC(pd);
                        ArrayList<String> TrainZC = new ArrayList<>();
                        for (PageData data1 : TrainZClist) {
                            String zczxname = data1.getString("zczxnamename");
                            TrainZC.add(zczxname);
                        }
                        String TrainZCstring = TrainZC.toString().substring(1, TrainZC.toString().length() - 1);
                        dataRow.createCell((short) 9).setCellValue(TrainZCstring);

                        dataRow.createCell((short) 10).setCellValue(pd1.getString("remark"));

                    }

                }
                String filename = new SimpleDateFormat("yyyyMMdd").format(new Date()) + "-TrainReco.xls";
                System.out.println(filename);
                response.setCharacterEncoding("UTF-8");
                response.setContentType("application/vnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + filename);
                OutputStream ouputStream = response.getOutputStream();
                wb.write(ouputStream);
                ouputStream.flush();
                ouputStream.close();
                json.put("success", "true");
                json.put("msg", "导出成功");
            } else {
                json.put("success", "false");
                json.put("msg", "超时，请重新登陆");
            }

//        } catch (Exception e) {
//            json.put("success", "false");
//        }
        return json.toString();
    }



    public String getTime() {
        Date date = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return dateFormat.format(date);
    }


    public  String countHandle(PageData pd,boolean flag,String name) {
        String resultString = null;
        String HandleString = pd.getString(name);
        if (pd.getString(name) != null && flag == false && HandleString.contains(",")) {
            HandleString = "1." + HandleString;
            char[] chars = HandleString.toCharArray();
            List<String> result = new ArrayList<String>();
            //编号i
            int i = 2;
            for (char aChar : chars) {
                if (aChar == ',') {
                    result.add(i++ + ".");
                } else {
                    result.add(String.valueOf(aChar));
                }
            }
            resultString = String.valueOf(result).replaceAll(",", "")
                    .replaceAll("\\[", "").replaceAll("]", "")
                    .replaceAll(" ", "");


        } else {
            resultString = pd.getString(name);
        }


        return resultString;
    }


}
