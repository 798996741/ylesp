package com.yulun.controller.msgtemp;

import com.alibaba.fastjson.JSONObject;
import com.fh.entity.Page;
import com.fh.util.PageData;
import com.xxgl.service.mng.ZxlbManager;
import com.yulun.controller.api.CommonIntefate;
import com.yulun.entity.MsgTemp;
import com.yulun.service.MsgTempManager;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.UUID;

public class MsgTempWeb  implements CommonIntefate {
    @Resource(name = "msgTempService")
    private MsgTempManager msgTempManager;
    @Resource(name = "zxlbService")
    private ZxlbManager zxlbService;

    @Override
    public JSONObject execute(JSONObject data, HttpServletRequest request) throws Exception {
        JSONObject object=new JSONObject();
        try {
            PageData pd = new PageData();
            Page page = new Page();
            String cmd = data.getString("cmd") == null ? "" : data.getString("cmd");
            PageData pd_stoken = new PageData();
            JSONObject json = data.getJSONObject("data");
            pd_stoken.put("TOKENID", json.get("tokenid"));
            PageData pd_token = zxlbService.findByTokenId(pd_stoken);
            if (pd_token != null) {
                if (cmd.equals("insertMagTemp")) {
                    pd.put("content",json.getString("content"));
                    pd.put("parentid",json.getString("parentid"));
                    pd.put("tempname",json.getString("tempname"));
                    msgTempManager.save(pd);
                    object.put("success","true");
                }else if(cmd.equals("updateMagTemp")){
                    pd.put("id",json.getString("id"));
                    pd.put("content",json.getString("content"));
                    pd.put("parentid",json.getString("parentid"));
                    pd.put("tempname",json.getString("tempname"));
                    msgTempManager.edit(pd);
                    object.put("success","true");
                }else if(cmd.equals("deleteMagTemp")){
                    String[] ids = json.getString("id").split(",");
                    msgTempManager.deleteAll(ids);
                    object.put("success","true");
                    }else if(cmd.equals("listAllDict")){
                    Integer pageIndex = json.getInteger("pageIndex");
                    page.setCurrentPage(pageIndex);
                    Integer pageSize = json.getInteger("pageSize");
                    page.setShowCount(pageSize);
                    pd.put("keywords", json.get("keywords"));
                    page.setPd(pd);
                    List<PageData> msgAlllistPage = msgTempManager.findMsgAlllistPage(page);
                    object.put("pageId",pageIndex);
                    object.put("pageCount",page.getTotalPage());
                    object.put("recordCount",page.getTotalResult());
                    object.put("data",msgAlllistPage);
                    object.put("success","true");
                }else if(cmd.equals("listByParentId")){
                    String parentid = json.getString("parentid");
                    List<MsgTemp> msgTemps = msgTempManager.listSubDictByParentId(parentid);
                    object.put("data",msgTemps);
                    object.put("success","true");
                }else if (cmd.equals("findMsgLogAll")){
                    Integer pageIndex = json.getInteger("pageIndex");
                    page.setCurrentPage(pageIndex);
                    Integer pageSize = json.getInteger("pageSize");
                    page.setShowCount(pageSize);
                    pd.put("starttime",json.getString("starttime"));
                    pd.put("endtime",json.getString("endtime"));
                    pd.put("keywords",json.getString("keywords"));
                    pd.put("sendman",json.getString("sendman"));
                    pd.put("phone",json.getString("phone"));
                    pd.put("acceptman",json.getString("acceptman"));
                    page.setPd(pd);
                    List<PageData> msgLogAll = msgTempManager.findMsgLogAlllistPage(page);
                    object.put("pageId",pageIndex);
                    object.put("pageCount",page.getTotalPage());
                    object.put("recordCount",page.getTotalResult());
                    object.put("data",msgLogAll);
                    object.put("success","true");

                }else if (cmd.equals("insertMsgLog")){
                    pd.put("time",json.getString("time"));
                    pd.put("way",json.getString("way"));
                    pd.put("temp",json.getString("temp"));
                    pd.put("content",json.getString("content"));
                    pd.put("acceptman",json.getString("acceptman"));
                    pd.put("phone",json.getString("phone"));
                    pd.put("sendman",json.getString("sendman"));
                    pd.put("sendtime",json.getString("sendtime"));
                    pd.put("state",json.getString("state"));
                    pd.put("returnmsg",json.getString("returnmsg"));
                    pd.put("clientcate",json.getString("clientcate"));
                    pd.put("clientname",json.getString("clientname"));
                    msgTempManager.insertMsgLog(pd);
                    object.put("success","true");
                }else if (cmd.equals("updateMsgLog")){
                    pd.put("id",json.getString("id"));
                    pd.put("time",json.getString("time"));
                    pd.put("way",json.getString("way"));
                    pd.put("temp",json.getString("temp"));
                    pd.put("content",json.getString("content"));
                    pd.put("acceptman",json.getString("acceptman"));
                    pd.put("phone",json.getString("phone"));
                    pd.put("sendman",json.getString("sendman"));
                    pd.put("sendtime",json.getString("sendtime"));
                    pd.put("state",json.getString("state"));
                    pd.put("returnmsg",json.getString("returnmsg"));
                    pd.put("clientcate",json.getString("clientcate"));
                    pd.put("clientname",json.getString("clientname"));
                    msgTempManager.updateMsgLog(pd);
                    object.put("success","true");
                }else if (cmd.equals("findMsgLogById")){
                    Integer pageIndex = json.getInteger("pageIndex");
                    page.setCurrentPage(pageIndex);
                    Integer pageSize = json.getInteger("pageSize");
                    page.setShowCount(pageSize);
                    pd.put("starttime",json.getString("starttime"));
                    pd.put("endtime",json.getString("endtime"));
                    pd.put("keywords",json.getString("keywords"));
                    pd.put("sendman",json.getString("sendman"));
                    pd.put("phone",json.getString("phone"));
                    pd.put("acceptman",json.getString("acceptman"));
                    pd.put("id",json.getString("id"));
                    page.setPd(pd);
                    object.put("data",null);
                    List<PageData> findMsgcustByIdlistPage = msgTempManager.findMsgcustByIdlistPage(page);
                    if (findMsgcustByIdlistPage!=null){
                        object.put("data",findMsgcustByIdlistPage);
                    }
                    List<PageData> findMsgvipByIdlistPage = msgTempManager.findMsgvipByIdlistPage(page);
                    if (findMsgvipByIdlistPage!=null){
                        object.put("data",findMsgvipByIdlistPage);
                    }

                    object.put("pageId",pageIndex);
                    object.put("pageCount",page.getTotalPage());
                    object.put("recordCount",page.getTotalResult());
                    object.put("success","true");
                }else if (cmd.equals("deleteTempAll")){
                    String[] ids = json.getString("id").split(",");
                    msgTempManager.deleteAll(ids);
                    object.put("success","true");
                }
            } else {
                object.put("success", "false");
                object.put("msg", "登录超时，请重新登录");
            }

        } catch (Exception e) {
            object.put("success", "false");
            object.put("msg", "异常");
        }

        return object;
    }

    public String getUUID32() {
        String uuid = UUID.randomUUID().toString();
        uuid = uuid.replace("-", "");
        return uuid;
    }
}
